/*
 * dbAccess.h
 *
 *      Author: University of Salento and CMCC 
 */

#ifndef DBACCESS_H_
#define DBACCESS_H_

// --------------- Connection parameters ------------------
#define POSTGRES_UNIX_SOCKET  	NULL
#define POSTGRES_CLIENT_FLAG	0
// --------------------------------------------------------

// Enable log file with SOLR urls.
#define SOLR_LOG	0   //0 not enable to save the results in the myfile.csv, 1 otherwise

// --------------- Query ----------------------------------
#define QUERY1 	"SELECT s.id, h.ip, s.port FROM esgf_dashboard.service_instance s INNER JOIN esgf_dashboard.host h ON h.id=s.idHost ORDER BY h.ip, s.port;" 

#define QUERY2	"INSERT INTO esgf_dashboard.service_status(status, elapsedTime, idServiceInstance)" 
#define QUERY2_UPDATE	"update esgf_dashboard.host set status=%d, elapsedTime=%ld where ip='%s';" 

//#define QUERY3 	"start transaction esgf_dashboard.service_instance AND esgf_dashboard.host"
//#define QUERY3 	"start transaction; lock esgf_dashboard.service_instance; lock esgf_dashboard.host;"
#define QUERY3 	"start transaction;"

//#define QUERY4 	"stop transaction;"
#define QUERY4 	"end transaction;"

// QUERY TO MANAGE THE OLD SERVICE METRICS 
#define QUERY5  "DELETE from esgf_dashboard.service_status where timestamp < (now() - interval '%d months' - interval '%d day');"

//#define QUERY6 	"start transaction on esgf_dashboard.service_status"
#define QUERY6 	"start transaction; lock esgf_dashboard.service_status;"

// #define QUERY7 	"THE PRE-COMPUTED DATA CUBE FOR DATA DOWNLOAD METRICS"
//#define QUERY7  "drop table if exists esgf_dashboard.analytics2; create table esgf_dashboard.analytics2 as (select d.project, d.model, d.experiment, s.name, count(*) as downloadcount, sum(size/1024/1024) as downloadsize from (select fv.file_id, fv.size, fv.url from (select file_id, max(version) as mv from file_version group by file_id order by mv desc) as mver, file_version as fv where fv.file_id=mver.file_id and fv.version=mver.mv) as lver, esgf_node_manager.access_logging as dl, file as f, dataset as d, standard_name as s, variable as v  where dl.url=lver.url and dl.success='t' and lver.file_id=f.id and s.name=v.standard_name and v.dataset_id=d.id and f.dataset_id=d.id group by project, model, experiment, s.name);"

//#define QUERY8 	"start transaction"
#define QUERY8 	"start transaction;"

//#define QUERY9 	"drop table if exists esgf_dashboard.analytics2; create table esgf_dashboard.analytics2 (project varchar(255), model varchar(255), experiment varchar(255), name varchar(255), downloadsize bigint default 0, downloadcount numeric default 0);"

// GLOBAL METRICS for DATA and USERS

#define GET_DOWNLOADED_DATA_SIZE "select sum (size) from esgf_dashboard.finaldw where success=1;"

#define GET_DOWNLOADED_DATA_COUNT "select count(*) from esgf_dashboard.finaldw where success=1;"

#define GET_REGISTERED_USERS_COUNT "select count(distinct(username)) from esgf_security.user where openid like 'https://%s%';"

#define GET_LAST_IMPORT_ID "select lastprocessed_id from esgf_dashboard.reconciliation_process;"

// CPU QUERIES
#define START_TRANSACTION_CPU_METRICS "start transaction; lock esgf_dashboard.cpu_metrics;"
#define STORE_CPU_METRICS "INSERT into esgf_dashboard.cpu_metrics(loadavg1,loadavg5,loadavg15,time_stamp) values(%f,%f,%f,now());"
#define REMOVE_OLD_CPU_METRICS "DELETE from esgf_dashboard.cpu_metrics where time_stamp < (now() - interval '%d months' - interval '%d day');"
#define END_TRANSACTION_CPU_METRICS "end transaction;"

// MEMORY QUERIES
#define START_TRANSACTION_MEMORY_METRICS "start transaction; lock esgf_dashboard.memory_metrics;"
#define STORE_MEMORY_METRICS "INSERT into esgf_dashboard.memory_metrics(freeram,usedram,freeswap,usedswap,time_stamp) values(%ld,%ld,%ld,%ld,now());"
#define REMOVE_OLD_MEMORY_METRICS "DELETE from esgf_dashboard.memory_metrics where time_stamp < (now() - interval '%d months' - interval '%d day');"
#define END_TRANSACTION_MEMORY_METRICS "end transaction;"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP1 "drop table if exists esgf_dashboard.dwstep1; create table esgf_dashboard.dwstep1 as (select file_id, max(version) as mv from file_version group by file_id order by mv desc);"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP1 "drop table esgf_dashboard.dwstep1; create table esgf_dashboard.dwstep1 as (select file_id, max(version) as mv from file_version group by file_id order by mv desc);"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP2 "drop table if exists esgf_dashboard.dwstep2; create table esgf_dashboard.dwstep2 as (select fv.file_id, fv.size, fv.url, substr(f.base, 0, position('_' in f.base)) as var, dwstep1.mv from file_version as fv, esgf_dashboard.dwstep1, file as f where fv.file_id=dwstep1.file_id and fv.version=dwstep1.mv and f.id=fv.file_id);"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP2 "drop table esgf_dashboard.dwstep2; create table esgf_dashboard.dwstep2 as (select fv.file_id, fv.size, fv.url, substr(f.base, 0, position('_' in f.base)) as var, dwstep1.mv from file_version as fv, esgf_dashboard.dwstep1, file as f where fv.file_id=dwstep1.file_id and fv.version=dwstep1.mv and f.id=fv.file_id);"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP3 "drop table if exists esgf_dashboard.dwstep3; create table esgf_dashboard.dwstep3 as (select file.dataset_id, dwstep2.size,dwstep2.url, dwstep2.mv,dwstep2.file_id, dwstep2.var from file, esgf_dashboard.dwstep2 where dwstep2.file_id=file.id);"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP3 "drop table esgf_dashboard.dwstep3; create table esgf_dashboard.dwstep3 as (select file.dataset_id, dwstep2.size,dwstep2.url, dwstep2.mv,dwstep2.file_id, dwstep2.var from file, esgf_dashboard.dwstep2 where dwstep2.file_id=file.id);"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP4 "drop table if exists esgf_dashboard.dwstep4; create table esgf_dashboard.dwstep4 as (select d.project, d.model, d.experiment, d.name as datasetname, d.id as datasetid, dwstep3.size, dwstep3.url, dwstep3.mv,dwstep3.file_id,dwstep3.var from dataset d, esgf_dashboard.dwstep3 where d.id=dwstep3.dataset_id);"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP4 "drop table esgf_dashboard.dwstep4; create table esgf_dashboard.dwstep4 as (select d.project, d.model, d.experiment, d.name as datasetname, d.id as datasetid, dwstep3.size, dwstep3.url, dwstep3.mv,dwstep3.file_id,dwstep3.var from dataset d, esgf_dashboard.dwstep3 where d.id=dwstep3.dataset_id);"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP5 "drop table if exists esgf_dashboard.dwstep5; create table esgf_dashboard.dwstep5 as (select * from dataset_attr as da where da.name='realm');"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP5 "drop table esgf_dashboard.dwstep5; create table esgf_dashboard.dwstep5 as (select * from dataset_attr as da where da.name='realm');"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP5B "drop table if exists esgf_dashboard.dwstep5b; create table esgf_dashboard.dwstep5b as (select * from dataset_attr as da where da.name='time_frequency');"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP5B "drop table esgf_dashboard.dwstep5b; create table esgf_dashboard.dwstep5b as (select * from dataset_attr as da where da.name='time_frequency');"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP5C "drop table if exists esgf_dashboard.dwstep5c; create table esgf_dashboard.dwstep5c as (select * from dataset_attr as da where da.name='institute');"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP5C "drop table esgf_dashboard.dwstep5c; create table esgf_dashboard.dwstep5c as (select * from dataset_attr as da where da.name='institute');"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP5D "drop table if exists esgf_dashboard.dwstep5d; create table esgf_dashboard.dwstep5d as (select * from dataset_attr as da where da.name='product');"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP5D "drop table esgf_dashboard.dwstep5d; create table esgf_dashboard.dwstep5d as (select * from dataset_attr as da where da.name='product');"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP5E "drop table if exists esgf_dashboard.dwstep5e; create table esgf_dashboard.dwstep5e as (select * from dataset_attr as da where da.name='ensemble');"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP5E "drop table esgf_dashboard.dwstep5e; create table esgf_dashboard.dwstep5e as (select * from dataset_attr as da where da.name='ensemble');"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP5F "drop table if exists esgf_dashboard.dwstep5f; create table esgf_dashboard.dwstep5f as (select * from dataset_attr as da where da.name='cmor_table');"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP5F "drop table esgf_dashboard.dwstep5f; create table esgf_dashboard.dwstep5f as (select * from dataset_attr as da where da.name='cmor_table');"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP6 "drop table if exists esgf_dashboard.dwstep6; create table esgf_dashboard.dwstep6 as (select dwstep4.project, dwstep4.model, dwstep4.experiment, dwstep4.datasetname, dwstep4.datasetid, dwstep4.size, dwstep4.url, dwstep4.mv, dwstep4.file_id,dwstep4.var, dwstep5.value as realm from esgf_dashboard.dwstep4 LEFT OUTER JOIN esgf_dashboard.dwstep5 ON (dwstep4.datasetid = dwstep5.dataset_id));"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP6 "drop table esgf_dashboard.dwstep6; create table esgf_dashboard.dwstep6 as (select dwstep4.project, dwstep4.model, dwstep4.experiment, dwstep4.datasetname, dwstep4.datasetid, dwstep4.size, dwstep4.url, dwstep4.mv, dwstep4.file_id,dwstep4.var, dwstep5.value as realm from esgf_dashboard.dwstep4 LEFT OUTER JOIN esgf_dashboard.dwstep5 ON (dwstep4.datasetid = dwstep5.dataset_id));"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP6B "drop table if exists esgf_dashboard.dwstep6b; create table esgf_dashboard.dwstep6b as (select dwstep6.project, dwstep6.model, dwstep6.experiment, dwstep6.datasetname, dwstep6.datasetid, dwstep6.size, dwstep6.url, dwstep6.mv, dwstep6.file_id,dwstep6.var,dwstep6.realm, dwstep5b.value as time_frequency from esgf_dashboard.dwstep6 LEFT OUTER JOIN esgf_dashboard.dwstep5b ON (dwstep6.datasetid = dwstep5b.dataset_id));"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP6B "drop table esgf_dashboard.dwstep6b; create table esgf_dashboard.dwstep6b as (select dwstep6.project, dwstep6.model, dwstep6.experiment, dwstep6.datasetname, dwstep6.datasetid, dwstep6.size, dwstep6.url, dwstep6.mv, dwstep6.file_id,dwstep6.var,dwstep6.realm, dwstep5b.value as time_frequency from esgf_dashboard.dwstep6 LEFT OUTER JOIN esgf_dashboard.dwstep5b ON (dwstep6.datasetid = dwstep5b.dataset_id));"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP6C "drop table if exists esgf_dashboard.dwstep6c; create table esgf_dashboard.dwstep6c as (select dwstep6b.project, dwstep6b.model, dwstep6b.experiment, dwstep6b.datasetname, dwstep6b.datasetid, dwstep6b.size, dwstep6b.url, dwstep6b.mv, dwstep6b.file_id,dwstep6b.var,dwstep6b.realm, dwstep6b.time_frequency, dwstep5c.value as institute from esgf_dashboard.dwstep6b LEFT OUTER JOIN esgf_dashboard.dwstep5c ON (dwstep6b.datasetid = dwstep5c.dataset_id));"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP6C "drop table esgf_dashboard.dwstep6c; create table esgf_dashboard.dwstep6c as (select dwstep6b.project, dwstep6b.model, dwstep6b.experiment, dwstep6b.datasetname, dwstep6b.datasetid, dwstep6b.size, dwstep6b.url, dwstep6b.mv, dwstep6b.file_id,dwstep6b.var,dwstep6b.realm, dwstep6b.time_frequency, dwstep5c.value as institute from esgf_dashboard.dwstep6b LEFT OUTER JOIN esgf_dashboard.dwstep5c ON (dwstep6b.datasetid = dwstep5c.dataset_id));"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP6D "drop table if exists esgf_dashboard.dwstep6d; create table esgf_dashboard.dwstep6d as (select dwstep6c.project, dwstep6c.model, dwstep6c.experiment, dwstep6c.datasetname, dwstep6c.datasetid, dwstep6c.size, dwstep6c.url, dwstep6c.mv, dwstep6c.file_id,dwstep6c.var,dwstep6c.realm, dwstep6c.time_frequency, dwstep6c.institute, dwstep5d.value as product from esgf_dashboard.dwstep6c LEFT OUTER JOIN esgf_dashboard.dwstep5d ON (dwstep6c.datasetid = dwstep5d.dataset_id));"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP6D "drop table esgf_dashboard.dwstep6d; create table esgf_dashboard.dwstep6d as (select dwstep6c.project, dwstep6c.model, dwstep6c.experiment, dwstep6c.datasetname, dwstep6c.datasetid, dwstep6c.size, dwstep6c.url, dwstep6c.mv, dwstep6c.file_id,dwstep6c.var,dwstep6c.realm, dwstep6c.time_frequency, dwstep6c.institute, dwstep5d.value as product from esgf_dashboard.dwstep6c LEFT OUTER JOIN esgf_dashboard.dwstep5d ON (dwstep6c.datasetid = dwstep5d.dataset_id));"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP6E "drop table if exists esgf_dashboard.dwstep6e; create table esgf_dashboard.dwstep6e as (select dwstep6d.project, dwstep6d.model, dwstep6d.experiment, dwstep6d.datasetname, dwstep6d.datasetid, dwstep6d.size, dwstep6d.url, dwstep6d.mv, dwstep6d.file_id,dwstep6d.var,dwstep6d.realm, dwstep6d.time_frequency, dwstep6d.institute, dwstep6d.product, dwstep5e.value as ensemble from esgf_dashboard.dwstep6d LEFT OUTER JOIN esgf_dashboard.dwstep5e ON (dwstep6d.datasetid = dwstep5e.dataset_id));"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP6E "drop table esgf_dashboard.dwstep6e; create table esgf_dashboard.dwstep6e as (select dwstep6d.project, dwstep6d.model, dwstep6d.experiment, dwstep6d.datasetname, dwstep6d.datasetid, dwstep6d.size, dwstep6d.url, dwstep6d.mv, dwstep6d.file_id,dwstep6d.var,dwstep6d.realm, dwstep6d.time_frequency, dwstep6d.institute, dwstep6d.product, dwstep5e.value as ensemble from esgf_dashboard.dwstep6d LEFT OUTER JOIN esgf_dashboard.dwstep5e ON (dwstep6d.datasetid = dwstep5e.dataset_id));"

#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP6F "drop table if exists esgf_dashboard.dwstep6f; create table esgf_dashboard.dwstep6f as (select dwstep6e.project, dwstep6e.model, dwstep6e.experiment, dwstep6e.datasetname, dwstep6e.datasetid, dwstep6e.size, dwstep6e.url, dwstep6e.mv, dwstep6e.file_id,dwstep6e.var,dwstep6e.realm, dwstep6e.time_frequency, dwstep6e.institute, dwstep6e.product, dwstep6e.ensemble, dwstep5f.value as cmor_table from esgf_dashboard.dwstep6e LEFT OUTER JOIN esgf_dashboard.dwstep5f ON (dwstep6e.datasetid = dwstep5f.dataset_id));"
//#define QUERY_DATA_DOWNLOAD_METRICS_DWSTEP6F "drop table esgf_dashboard.dwstep6f; create table esgf_dashboard.dwstep6f as (select dwstep6e.project, dwstep6e.model, dwstep6e.experiment, dwstep6e.datasetname, dwstep6e.datasetid, dwstep6e.size, dwstep6e.url, dwstep6e.mv, dwstep6e.file_id,dwstep6e.var,dwstep6e.realm, dwstep6e.time_frequency, dwstep6e.institute, dwstep6e.product, dwstep6e.ensemble, dwstep5f.value as cmor_table from esgf_dashboard.dwstep6e LEFT OUTER JOIN esgf_dashboard.dwstep5f ON (dwstep6e.datasetid = dwstep5f.dataset_id));"

#define QUERY_DATA_DOWNLOAD_METRICS_FINALDW_CREATE "drop table if exists esgf_dashboard.finaldw; create table esgf_dashboard.finaldw  (al_id bigint, datasetid integer, file_id integer ,project character varying(1024),model character varying(1024),experiment character varying(512), url character varying(1024),mv integer, var character varying(512), realm character varying(512), user_id_hash character varying(512), user_idp character varying(256), year integer, month integer, day  integer, hour integer, service_type character varying(512), remote_addr character varying(128), datasetname character varying(255),time_frequency character varying(512), institute character varying(512),product character varying(512),ensemble character varying(512),cmor_table character varying(512), size bigint,success integer, duration bigint, peername character varying(1024),UNIQUE(al_id,peername));"
//#define QUERY_DATA_DOWNLOAD_METRICS_FINALDW_CREATE "drop table esgf_dashboard.finaldw; create table esgf_dashboard.finaldw  (al_id bigint, datasetid integer, file_id integer ,project character varying(1024),model character varying(1024),experiment character varying(512), url character varying(1024),mv integer, var character varying(512), realm character varying(512), user_id_hash character varying(512), user_idp character varying(256), year integer, month integer, day  integer, hour integer, service_type character varying(512), remote_addr character varying(128), datasetname character varying(255),time_frequency character varying(512), institute character varying(512),product character varying(512),ensemble character varying(512),cmor_table character varying(512), size bigint,success integer, duration bigint, peername character varying(1024), UNIQUE(al_id,peername));"

#define QUERY_DATA_DOWNLOAD_METRICS_GET_RAW_DATA "select al.id as al_id, dwstep6f.datasetid, dwstep6f.file_id, dwstep6f.project, dwstep6f.model, dwstep6f.experiment, dwstep6f.url, dwstep6f.mv,  dwstep6f.var, dwstep6f.realm, al.user_id_hash, al.user_idp,  (extract(year from (TIMESTAMP WITH TIME ZONE 'epoch' + al.date_fetched * INTERVAL '1 second'))) as year, (extract(month from (TIMESTAMP WITH TIME ZONE 'epoch' + al.date_fetched * INTERVAL '1 second'))) as month, (extract(day from (TIMESTAMP WITH TIME ZONE 'epoch' + al.date_fetched * INTERVAL '1 second'))) as day,  (extract(hour from (TIMESTAMP WITH TIME ZONE 'epoch' + al.date_fetched * INTERVAL '1 second'))) as hour, al.service_type, al.remote_addr,  dwstep6f.datasetname, dwstep6f.time_frequency,dwstep6f.institute, dwstep6f.product,dwstep6f.ensemble,dwstep6f.cmor_table, (dwstep6f.size)/1024 as size, (case success when 't' then 1 else 0 end) success, al.duration  from esgf_node_manager.access_logging as al, esgf_dashboard.dwstep6f where dwstep6f.url=al.url and al.id>(select lastprocessed_id from esgf_dashboard.reconciliation_process) order by al_id;"
//#define QUERY_DATA_DOWNLOAD_METRICS_GET_RAW_DATA "select al.id as al_id, dwstep6f.datasetid, dwstep6f.file_id, dwstep6f.project, dwstep6f.model, dwstep6f.experiment, dwstep6f.url, dwstep6f.mv,  dwstep6f.var, dwstep6f.realm, al.user_id_hash, al.user_idp,  (extract(year from (TIMESTAMP WITH TIME ZONE 'epoch' + al.date_fetched * INTERVAL '1 second'))) as year, (extract(month from (TIMESTAMP WITH TIME ZONE 'epoch' + al.date_fetched * INTERVAL '1 second'))) as month, (extract(day from (TIMESTAMP WITH TIME ZONE 'epoch' + al.date_fetched * INTERVAL '1 second'))) as day,  (extract(hour from (TIMESTAMP WITH TIME ZONE 'epoch' + al.date_fetched * INTERVAL '1 second'))) as hour, al.service_type, al.remote_addr,  dwstep6f.datasetname, dwstep6f.time_frequency,dwstep6f.institute, dwstep6f.product,dwstep6f.ensemble,dwstep6f.cmor_table, (dwstep6f.size)/1024 as size, success, al.duration  from esgf_node_manager.access_logging as al, esgf_dashboard.dwstep6f where dwstep6f.url=al.url and al.id>(select lastprocessed_id from esgf_dashboard.reconciliation_process) order by al_id;"

//#define URL_STATS "http://%s/esgf-desktop/olapJson/GetStats?al_id=%ld&delta=%ld"
//#define URL_STATS_PLANB "http://%s/esgf-desktop/olapJson/GetStatsB"
//#define URL_AGGREGATED_STATS "http://%s/esgf-desktop/olapJson/GetMetrics?sensor=%s&hostname=%s"
//#define URL_STATS "http://%s:8080/ESGFNodeDesktop/gridJson/GetStats?al_id=%ld&delta=%ld"

#define QUERY_INSERT_DATA_DOWNLOAD_METRICS_FINALDW "insert into esgf_dashboard.finaldw(%s,peername) values(%s,'%s');"
#define QUERY_UPDATE_LAST_PROCESSED_AL_ID "update esgf_dashboard.reconciliation_process set lastprocessed_id =%lld, time_stamp=now();"

#define START_TRANSACTION_FINALDW_INGESTION "start transaction; lock esgf_dashboard.finaldw; lock esgf_dashboard.reconciliation_process;"
#define END_TRANSACTION_FINALDW_INGESTION "end transaction;"

#define QUERY_STATS_AGGREGATOR_GET_HOSTLIST "select hostname,lastprocessed_id,time_stamp from esgf_dashboard.aggregation_process;"
#define QUERY_STATS_AGGREGATOR_GET_HOSTLIST_PLANB "select host,action from esgf_dashboard.aggregation_process_planb;"

#define QUERY_UPDATE_PEER_TIMESTAMP "update esgf_dashboard.aggregation_process set time_stamp=now() where hostname='%s';"
#define QUERY_UPDATE_PEER_TIMESTAMP_PLANB "update esgf_dashboard.aggregation_process_planb set time_stamp=now(),counter_aggr=counter_aggr+1 where host='%s';"
#define QUERY_REMOVE_STATS_FEDDW "delete from esgf_dashboard.federationdw where peername='%s';"
#define QUERY_REMOVE_STATS_FEDDW_PLANB "delete from esgf_dashboard.federationdw_planb where host='%s';"
#define START_TRANSACTION_FEDDW "start transaction; lock esgf_dashboard.federationdw;"
#define START_TRANSACTION_FEDDW_PLANB "start transaction; lock esgf_dashboard.federationdw_planb;"
#define END_TRANSACTION_FEDDW "end transaction;"
#define END_TRANSACTION_FEDDW_PLANB "end transaction;"

//#define INSERT_REMOTE_STAT "insert into esgf_dashboard.federationdw(al_id, datasetid,file_id,project,model,experiment, url,mv, var, realm, user_id_hash, user_idp, year, month, day, hour , service_type, remote_addr , datasetname ,time_frequency , institute , product ,ensemble ,cmor_table , size ,success , duration , peername) values%s" 
//#define INSERT_REMOTE_STAT_PLANB "insert into esgf_dashboard.federationdw_planb(year, month, downloads,files,users,gb,host) values%s" 
#define INSERT_AGGREGATED_STATS "insert into esgf_dashboard.sensor_table_%s_tmp(host_name,last5m_o, last1h_o, last1d_o, last1w_o, last1m_o, last1y_o, last5m_p, last1h_p, last1d_p, last1w_p, last1m_p, last1y_p) values%s" 

//#define QUERY_GET_LAST_PROCESSED_ID_FED  "select max(al_id) from esgf_dashboard.federationdw where peername='%s';"
//#define QUERY_UPDATE_PEER_LAST_ID "update esgf_dashboard.aggregation_process set lastprocessed_id=%ld where hostname='%s';"

// PLAN B
#define QUERY_PLANB_SUMMARY_DB_TMP "drop table if exists esgf_dashboard.%s_tmp; create table esgf_dashboard.%s_tmp as (SELECT EXTRACT (YEAR FROM (TIMESTAMP WITH TIME ZONE 'epoch' + fixed_log.date_fetched * INTERVAL '1 second')) AS year, EXTRACT (MONTH FROM (TIMESTAMP WITH TIME ZONE 'epoch' + fixed_log.date_fetched * INTERVAL '1 second')) AS month, COUNT(*) AS downloads, COUNT(distinct url) AS files, COUNT(distinct user_id_hash) AS users, SUM(fixed_log.size)/1024/1024/1024 AS gb FROM (SELECT file.url, log.user_id_hash, max(log.timestamp) AS date_fetched, max(file.size) AS size FROM esgf_dashboard.dashboard_queue AS log JOIN public.file_version AS file ON (UPPER(log.url_path) LIKE '%s.NC' AND log.url_path=file.url) WHERE log.success AND log.duration > 1000 GROUP BY file.url, log.user_id_hash) AS fixed_log GROUP BY year, month ORDER BY year, month);"
//set the number of downloads
#define QUERY_PLANB_SUMMARY_DB_CNT_TMP "drop table if exists esgf_dashboard.%s_cnt_tmp; create table esgf_dashboard.%s_cnt_tmp as (SELECT EXTRACT (YEAR FROM (TIMESTAMP WITH TIME ZONE 'epoch' + log.timestamp * INTERVAL '1 second')) AS year, EXTRACT (MONTH FROM (TIMESTAMP WITH TIME ZONE 'epoch' + log.timestamp * INTERVAL '1 second')) AS month, COUNT(*) AS downloads FROM esgf_dashboard.dashboard_queue as log WHERE log.success AND log.duration > 1000 AND UPPER(log.url_path) LIKE '%s.NC' GROUP BY year, month ORDER BY year, month);"
#define QUERY_SELECT_DOWNLOADS "select * from esgf_dashboard.%s_cnt_tmp;"
#define QUERY_UPDATE_DOWNLOADS "update esgf_dashboard.%s_tmp set downloads =%d where month=%s and year=%s;"
#define QUERY_PLANB_SUMMARY_DB_CONTINENT_TMP "drop table if exists esgf_dashboard.%s_continent_tmp; create table esgf_dashboard.%s_continent_tmp as (SELECT EXTRACT (YEAR FROM (TIMESTAMP WITH TIME ZONE 'epoch' + fixed_log.date_fetched * INTERVAL '1 second')) AS year, EXTRACT (MONTH FROM (TIMESTAMP WITH TIME ZONE 'epoch' + fixed_log.date_fetched * INTERVAL '1 second')) AS month, COUNT(*) AS downloads, COUNT(distinct url) AS files, COUNT(distinct user_id_hash) AS users, SUM(fixed_log.size)/1024/1024/1024 AS gb, fixed_log.continent FROM (SELECT cl.continent, file.url, log.user_id_hash, max(log.timestamp) AS date_fetched, max(file.size) AS size FROM esgf_dashboard.dashboard_queue AS log JOIN esgf_dashboard.client_stats_dm AS cl ON (log.remote_addr=cl.ip) JOIN public.file_version AS file ON (UPPER(log.url_path) LIKE '%s.NC' AND log.url_path=file.url) WHERE log.success AND log.duration > 1000 GROUP BY file.url, log.user_id_hash, cl.continent) AS fixed_log GROUP BY year, month, continent ORDER BY year, month);"
//set the number of downloads for continent
#define QUERY_PLANB_SUMMARY_DB_CONTINENT_CNT_TMP "drop table if exists esgf_dashboard.%s_continent_cnt_tmp; create table esgf_dashboard.%s_continent_cnt_tmp as (SELECT EXTRACT (YEAR FROM (TIMESTAMP WITH TIME ZONE 'epoch' + log.timestamp * INTERVAL '1 second')) AS year, EXTRACT (MONTH FROM (TIMESTAMP WITH TIME ZONE 'epoch' + log.timestamp * INTERVAL '1 second')) AS month, COUNT(*) AS downloads, cl.continent FROM esgf_dashboard.dashboard_queue as log JOIN esgf_dashboard.client_stats_dm AS cl ON (log.remote_addr=cl.ip) WHERE log.success AND log.duration > 1000 AND UPPER(log.url_path) LIKE '%s.NC' GROUP BY year, month, continent ORDER BY year, month);"
#define QUERY_SELECT_DOWNLOADS_CONT "select * from esgf_dashboard.%s_continent_cnt_tmp;"
#define QUERY_UPDATE_DOWNLOADS_CONT "update esgf_dashboard.%s_continent_tmp set downloads =%d where continent='%s' and month=%s and year=%s;"
#define QUERY_PLANB_ADD_HOSTNAME_COLUMN "alter table esgf_dashboard.%s_tmp add column host varchar(1024);"
#define QUERY_PLANB_ADD_HOSTNAME_VALUE "update esgf_dashboard.%s_tmp set host='%s'"
#define QUERY_PLANB_ADD_HOSTNAME_COLUMN_CONTINENT "alter table esgf_dashboard.%s_continent_tmp add column host varchar(1024);"
#define QUERY_PLANB_ADD_HOSTNAME_VALUE_CONTINENT "update esgf_dashboard.%s_continent_tmp set host='%s'"
#define QUERY_PLANB_SUMMARY_DB "drop table if exists esgf_dashboard.%s; alter table esgf_dashboard.%s_tmp rename to %s; drop table if exists esgf_dashboard.%s_cnt_tmp;"
#define QUERY_PLANB_SUMMARY_DB_CONTINENT "drop table if exists esgf_dashboard.%s_continent; alter table esgf_dashboard.%s_continent_tmp rename to %s_continent; drop table if exists esgf_dashboard.%s_continent_cnt_tmp;"
#define QUERY_PLANB_DOWNLOADS_BY_IDP "drop table if exists esgf_dashboard.downloads_by_idp; create table esgf_dashboard.downloads_by_idp as (SELECT COUNT(*) AS numdownloads, user_idp FROM esgf_dashboard.dashboard_queue GROUP BY user_idp);"
#define QUERY_PLANB_DOWNLOADS_BY_USER "drop table if exists esgf_dashboard.downloads_by_user; create table esgf_dashboard.downloads_by_user as (SELECT COUNT(*) AS numdownloads, SUM(fixed_log.size)/1024/1024/1024 AS downloadeddata, fixed_log.user_id_hash FROM (SELECT file.url, log.user_id_hash, max(file.size) AS size FROM esgf_dashboard.dashboard_queue AS log JOIN public.file_version AS file ON (UPPER(log.url_path) LIKE '%.NC' AND log.url_path=file.url) WHERE log.success AND log.duration > 1000 GROUP BY file.url, log.user_id_hash) AS fixed_log GROUP BY user_id_hash);"
// MACROS FOR REALTIME MONITORING

#define REALTIME_CPU_1M "realtime_cpu_1m.dat"
#define REALTIME_CPU_5M "realtime_cpu_5m.dat"
#define REALTIME_CPU_15M "realtime_cpu_15m.dat"
#define REALTIME_CPU_1M_TEMP "realtime_cpu_1m.dat.temp"
#define REALTIME_CPU_5M_TEMP "realtime_cpu_5m.dat.temp"
#define REALTIME_CPU_15M_TEMP "realtime_cpu_15m.dat.temp"

#define REALTIME_MEM_RAM "realtime_mem_ram.dat"
#define REALTIME_MEM_SWAP "realtime_mem_swap.dat"
#define REALTIME_MEM_RAM_TEMP "realtime_mem_ram.dat.temp"
#define REALTIME_MEM_SWAP_TEMP "realtime_mem_swap.dat.temp"

// END MACROS FOR REALTIME MONITORING

// START QUERIES FOR NEW STATS ENGINE
//#define QUERY_CREATE_METRIC_TABLE "drop table if exists esgf_dashboard.sensor_table_%s_tmp; create table esgf_dashboard.sensor_table_%s_tmp (host_name character varying(1024),last5m_o double precision, last1h_o double precision, last1d_o double precision, last1w_o double precision, last1m_o double precision, last1y_o double precision, last5m_p double precision, last1h_p double precision, last1d_p double precision, last1w_p double precision, last1m_p double precision, last1y_p double precision, time_stamp timestamp without time zone DEFAULT now() NOT NULL);"
#define QUERY_CREATE_METRIC_TABLE "create table esgf_dashboard.sensor_table_%s (host_name character varying(1024),sensor_name character varying(1024), last5m_o double precision, last1h_o double precision, last1d_o double precision, last1w_o double precision, last1m_o double precision, last1y_o double precision, last5m_p double precision, last1h_p double precision, last1d_p double precision, last1w_p double precision, last1m_p double precision, last1y_p double precision, time_stamp timestamp without time zone DEFAULT now() NOT NULL, UNIQUE(host_name,sensor_name));"

#define QUERY_INSERT_METRIC_TABLE "insert into esgf_dashboard.sensor_table_%s (host_name,sensor_name,last5m_o, last1h_o, last1d_o, last1w_o, last1m_o, last1y_o, last5m_p, last1h_p, last1d_p, last1w_p, last1m_p, last1y_p) values('%s','%s',%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f);"

#define QUERY_UPDATE_METRIC_TABLE "update esgf_dashboard.sensor_table_%s set last5m_o=%4.2f, last1h_o=%4.2f, last1d_o=%4.2f, last1w_o=%4.2f, last1m_o=%4.2f, last1y_o=%4.2f, last5m_p=%4.2f, last1h_p=%4.2f, last1d_p=%4.2f, last1w_p=%4.2f, last1m_p=%4.2f, last1y_p=%4.2f, time_stamp=now() where host_name='%s' and sensor_name='%s';"
// no longer used
//#define QUERY_RENAME_METRIC_TABLE "drop table if exists esgf_dashboard.sensor_table_%s; alter table esgf_dashboard.sensor_table_%s_tmp rename to sensor_table_%s;"

#define QUERY_LIST_ACTIVE_HOSTS "SELECT h.name, h.ip FROM esgf_dashboard.host h INNER JOIN esgf_dashboard.service_instance s ON h.id=s.idHost INNER JOIN esgf_dashboard.uses u ON u.idServiceInstance=s.id INNER JOIN esgf_dashboard.project_dash p ON p.id=u.idProject WHERE u.endDate IS NULL AND p.endDate IS NULL GROUP BY h.ip, h.name ORDER BY h.ip;"

// END QUERIES FOR NEW STATS ENGINE

// START QUERIES FOR NEW DATA MARTS
#define QUERY_CREATE_CLIENT_DATAMART "drop table if exists esgf_dashboard.client_stats_dm; CREATE TABLE esgf_dashboard.client_stats_dm (host character varying(255),ip character varying(64), lat numeric(9,6),lon numeric(9,6),country character varying(64),numclient integer,continent character varying(64));"
#define QUERY_GET_LIST_CLIENT_IPS "select distinct(remote_addr) as remote_addr from esgf_dashboard.dashboard_queue;"
#define QUERY_INSERT_CLIENT_INFO "insert into esgf_dashboard.client_stats_dm (host,ip,lat,lon,country,numclient) values('%s','%s',%f,%f,'%s',1);"
#define QUERY_UPDATE_CLIENT_STATS_DM "UPDATE esgf_dashboard.client_stats_dm SET continent=subquery.continent_name FROM (SELECT country.country_code, continent.continent_name FROM esgf_dashboard.continent JOIN esgf_dashboard.country ON country.continent_code=continent.continent_code GROUP BY country.country_code, continent.continent_name ORDER BY country.country_code) AS subquery WHERE client_stats_dm.country=subquery.country_code;"
// END QUERIES FOR NEW DATA MARTS

// --------------------------------------------------------
//
// PLAN A
// SELECT URL FROM DASHBOARD_QUEUE
#define QUERY_PLANA_SELECT_URL "select url_path,id,user_id from esgf_dashboard.dashboard_queue where processed=0 and not url_path like 'http%%' order by timestamp ASC limit 100;"
//#define QUERY_PLANA_SELECT_URL "select url_path,id from esgf_dashboard.dashboard_queue where processed=0 limit 1000;"
//#define QUERY_PLANA_SELECT_URL "select url_path,id from esgf_dashboard.dashboard_queue where processed=0 and url_path like '%%esg_dataroot%%' order by timestamp ASC limit 1000;"
//#define QUERY_PLANA_SELECT_URL "select url_path,id from esgf_dashboard.dashboard_queue where processed=0 and id=415547;"
#define QUERY_UPDATE_DASHBOARD_QUEUE "update esgf_dashboard.dashboard_queue set processed=1 where id=%d;"
#define QUERY_UPDATE_DASHBOARD_QUEUE_NO_AUTH "update esgf_dashboard.dashboard_queue set processed=2 where id=%d;"
#define QUERY_UPDATE_REGISTRY_INIT "update esgf_dashboard.registry set dmart_key=0,timestamp=0;"
// QUERY_INSERT_CROSS_DIM_DATE adds a new date of the downloaded file in the database
#define QUERY_INSERT_CROSS_DIM_DATE  "INSERT into esgf_dashboard.cross_dim_date(download_date,month,year) values('%s',%d,%d);"
// QUERY_INSERT_CROSS_DIM_GEOLOCATION adds a new geolocation of the downloaded file in the database
#define QUERY_INSERT_CROSS_DIM_GEOLOCATION "INSERT into esgf_dashboard.cross_dim_geolocation(latitude,longitude,country_id) values(%14.11f,%14.11f,%d);"
// QUERY_INSERT_CROSS_DIM_PROJECT adds a new project related to the downloaded file in the database
#define QUERY_INSERT_CROSS_DIM_PROJECT "INSERT into esgf_dashboard.cross_dim_project(project_name) values('%s');"
// QUERY_INSERT_CROSS_BRIDGE_PROJECT adds a new project related to the downloaded file in the database
#define QUERY_INSERT_CROSS_BRIDGE_PROJECT "INSERT into esgf_dashboard.cross_bridge_project(project_key,project_group_key) values(%d,%d);"
// QUERY_INSERT_CROSS_FACT_DOWNLOAD adds a new fact related to the downloaded file in the database
#define QUERY_INSERT_CROSS_FACT_DOWNLOAD "INSERT into esgf_dashboard.cross_fact_download(size,success,duration,replica,user_id_hash,host_name, user_idp,hour, minute, project_group_key, geolocation_key,date_key,id_query) values(%ld,'%s',%d,'%s','%s','%s','%s','%s','%s',%d,%d,%d,%d);"
// Get list of CROSS DIM DATE
#define QUERY_GET_LIST_OF_CROSS_DIM_DATE "SELECT download_date,date_key from esgf_dashboard.cross_dim_date;"
// Get list of CROSS DIM GEOLOCATION 
#define QUERY_GET_LIST_OF_CROSS_DIM_GEOLOCATION "SELECT (CAST(latitude as numeric(14,11)))||':'||(CAST(longitude as numeric(14,11))) AS name,geolocation_key from esgf_dashboard.cross_dim_geolocation;"
// Get list of CROSS DIM PROJECT 
#define QUERY_GET_LIST_OF_CROSS_DIM_PROJECT "SELECT project_name,project_key from esgf_dashboard.cross_dim_project;"
// Get list of CROSS BRIDGE PROJECT
#define QUERY_GET_LIST_OF_CROSS_BRIDGE_PROJECT "SELECT project_group_key, project_key from esgf_dashboard.cross_bridge_project;"
// Get list of CROSS BRIDGE PROJECT 
#define QUERY_GET_LIST_OF_CROSS_BRIDGE_PROJECT_TMP "SELECT array_to_string(array(SELECT s.project_key FROM esgf_dashboard.cross_bridge_project s where s.project_group_key=b.project_group_key order by s.project_key ASC), ',') AS project_key,b.project_group_key FROM esgf_dashboard.cross_bridge_project b GROUP BY project_group_key order BY b.project_group_key ASC;"
// Get list of CROSS DOWNLOAD 
#define QUERY_GET_LIST_OF_CROSS_DOWNLOAD "SELECT (CAST(size as bigint)||':'||CAST(success as bool)||':'||CAST(duration as integer)||':'||CAST(replica as bool)||':'||user_id_hash||':'||host_name||':'||user_idp||':'||CAST(hour as integer)||':'||CAST(minute as integer)||':'||CAST(project_group_key as integer)||':'||CAST(geolocation_key as bigint)||':'||CAST(date_key as integer))||':'||CAST(id_query as integer) AS name, download_key from esgf_dashboard.cross_fact_download;"
// Get list of OBS4MIPS DOWNLOAD 
#define QUERY_GET_LIST_OF_OBS4MIPS_DOWNLOAD "SELECT (CAST(size as bigint)||':'||CAST(success as bool)||':'||CAST(duration as integer)||':'||user_id_hash||':'||host_name||':'||user_idp||':'||CAST(hour as integer)||':'||CAST(minute as integer)||':'||index_node_name||':'||CAST(dataset_key as integer)||':'||CAST(file_key as integer)||':'||CAST(geolocation_key as integer))||':'||CAST(date_key as integer)||':'||CAST(institute_group_key as integer)||':'||CAST(variable_group_key as integer)||':'||CAST(time_frequency_group_key as integer)||':'||CAST(processing_level_group_key as integer)||':'||CAST(source_id_group_key as integer)||':'||CAST(realm_group_key as integer)||':'||CAST(id_query as integer) AS name, download_key from esgf_dashboard.obs4mips_fact_download;"
// Get list of CMIP5 DOWNLOAD 
#define QUERY_GET_LIST_OF_CMIP5_DOWNLOAD "SELECT (CAST(size as bigint)||':'||CAST(success as bool)||':'||CAST(duration as integer)||':'||CAST(replica as bool)||':'||host_name||':'||CAST(hour as integer)||':'||CAST(minute as integer)||':'||user_id_hash||':'||user_idp||':'||CAST(date_key as integer)||':'||CAST(geolocation_key as integer))||':'||CAST(dataset_key as integer)||':'||CAST(time_frequency_group_key as integer)||':'||CAST(variable_group_key as integer)||':'||CAST(experiment_group_key as integer)||':'||CAST(model_group_key as integer)||':'||CAST(realm_group_key as integer)||':'||CAST(institute_group_key as integer)||':'||CAST(id_query as integer) AS name, download_key from esgf_dashboard.cmip5_fact_download;"
#define QUERY_SELECT_DASHBOARD_QUEUE "SELECT timestamp,remote_addr,size,success, duration, user_id_hash, user_idp from esgf_dashboard.dashboard_queue where id=%d;"
// Insert new date adds a new date in the database
#define QUERY_INSERT_NEW_DATE "INSERT into esgf_dashboard.cross_dim_date(download_date,month,year) values('%s','%s','%s');"
// Retrieve the id value of a specific date
#define QUERY_GET_DATE_ID "SELECT date_key from esgf_dashboard.cross_dim_date where download_date='%s';"
//Select the continent starting from country_code of the remote_ip_address 
#define QUERY_SELECT_GEOLOCATION_INFO "SELECT country_id from esgf_dashboard.country where esgf_dashboard.country.country_code='%s';" 
//Select the geolocation_id starting from latitude and longitude
#define QUERY_GET_GEO_ID "SELECT geolocation_key from esgf_dashboard.cross_dim_geolocation where latitude=%14.11f and longitude=%14.11f;"
//Select the project_id starting from its name 
#define QUERY_GET_PROJ_ID "SELECT project_key from esgf_dashboard.cross_dim_project where project_name='%s';"
//Select the fact row starting from fact row 
#define QUERY_GET_FACT_ROW "SELECT download_key from esgf_dashboard.cross_fact_download where size=%ld and success='%s' and duration=%d and replica='%s' and user_id_hash='%s' and host_name='%s' and user_idp='%s' and hour='%s' and minute='%s' and project_group_key=%d and geolocation_key=%d and date_key=%d and id_query=%d;"
//Select the obs4mips row starting from obs4mips row 
#define QUERY_GET_OBS_ROW "SELECT download_key from esgf_dashboard.obs4mips_fact_download where size=%ld and success='%s' and duration=%d and user_id_hash='%s' and host_name='%s' and user_idp='%s' and hour='%s' and minute='%s' and index_node_name='%s' and dataset_key=%d and file_key=%d and geolocation_key=%d and date_key=%d and institute_group_key=%d and variable_group_key=%d and time_frequency_group_key=%d and processing_level_group_key=%d and source_id_group_key=%d and realm_group_key=%d and id_query=%d;"
//Select the cmip5 row starting from cmip5 row 
#define QUERY_GET_CMIP5_ROW "SELECT download_key from esgf_dashboard.cmip5_fact_download where size=%ld and success='%s' and duration=%d and replica='%s' and host_name='%s' and hour='%s' and minute='%s' and user_id_hash='%s' and user_idp='%s' and date_key=%d and geolocation_key=%d and dataset_key=%d and time_frequency_group_key=%d and variable_group_key=%d and experiment_group_key=%d and model_group_key=%d and realm_group_key=%d and institute_group_key=%d and id_query=%d;"

//Select the max group id from cross_bridge_project 
#define QUERY_GET_MAX_GROUP_ID "SELECT MAX(project_group_key) AS max_bridge_proj from esgf_dashboard.cross_bridge_project;"
//Retrieve the id of fact download 
#define QUERY_GET_CROSS_FACT_DOWNLOAD "SELECT download_key from esgf_dashboard.cross_fact_download where size=%d and success='%s' and duration=%d and replica='%s' and user_id_hash='%s' and host_name='%s' and user_idp='%s' and hour='%s' and minute='%s' and project_group_key=%d and geolocation_key=%d and date_key=%d;"
//insert into cross_dmart_project_host
#define QUERY_SELECT_INSERT_NEW_CROSS_DMART_PROJECT_HOST "DELETE FROM esgf_dashboard.cross_dmart_project_host_time where host_name='%s'; INSERT INTO esgf_dashboard.cross_dmart_project_host_time(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, host_name, project_name, month, year) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, fact.host_name, project.project_name, date.month, date.year FROM esgf_dashboard.cross_fact_download AS fact JOIN esgf_dashboard.cross_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cross_bridge_project AS bridgeproj ON fact.project_group_key = bridgeproj.project_group_key JOIN esgf_dashboard.cross_dim_project AS project ON bridgeproj.project_key = project.project_key WHERE size <> -1 GROUP BY host_name, project_name, month, year ORDER BY date.year, date.month ASC;"
#define QUERY_UPDATE_INSERT_NEW_CROSS_DMART_PROJECT_HOST "update esgf_dashboard.cross_dmart_project_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, number_of_replica_downloads = a.number_of_replica_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, host_name = a.host_name, project_name=a.project_name, month=a.month, year=a.year FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, fact.host_name as host_name, project.project_name as project_name, date.month as month, date.year as year FROM esgf_dashboard.cross_fact_download AS fact JOIN esgf_dashboard.cross_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cross_bridge_project AS bridgeproj ON fact.project_group_key = bridgeproj.project_group_key JOIN esgf_dashboard.cross_dim_project AS project ON bridgeproj.project_key = project.project_key WHERE size <> -1 and date.month=%d and date.year=%d and project.project_name='%s' GROUP BY host_name, project_name, month, year ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.project_name='%s';" 
#define QUERY_SELECT_CROSS_DMART_PROJECT_HOST "select month, year,project_name from esgf_dashboard.cross_dmart_project_host_time where dmart_key=%d;"
#define QUERY_SELECT_CROSS_DMART_PROJECT_HOST_P "select project_name from esgf_dashboard.cross_dmart_project_host_time where month=%d and year=%d;"
#define QUERY_SELECT_CROSS_DMART_HOST_POS "select distinct latitude, longitude, project_name from esgf_dashboard.cross_fact_download, esgf_dashboard.cross_dim_geolocation, esgf_dashboard.cross_bridge_project, esgf_dashboard.cross_dim_project  where esgf_dashboard.cross_fact_download.geolocation_key=esgf_dashboard.cross_dim_geolocation.geolocation_key and esgf_dashboard.cross_fact_download.project_group_key=esgf_dashboard.cross_bridge_project.project_group_key and esgf_dashboard.cross_bridge_project.project_key=esgf_dashboard.cross_dim_project.project_key;"
#define QUERY_SELECT_INSERT_NEW_CROSS_DMART_ISENES_KPIS "DELETE FROM esgf_dashboard.cross_dmart_isenes_kpis where host_name='%s'; INSERT INTO esgf_dashboard.cross_dmart_isenes_kpis(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, host_name, eu, month, year) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, fact.host_name, (CASE WHEN ct.continent_code='EU' THEN true ELSE false END) as eu, date.month, date.year FROM esgf_dashboard.cross_fact_download AS fact JOIN esgf_dashboard.cross_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cross_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key JOIN esgf_dashboard.country AS ct ON geo.country_id=ct.country_id WHERE size <> -1 GROUP BY host_name, eu, month, year ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_CROSS_DMART_ISENES_KPIS "select month, year from esgf_dashboard.cross_dmart_isenes_kpis where dmart_key=%d;"
#define QUERY_SELECT_CROSS_DMART_ISENES_KPIS_P "select eu from esgf_dashboard.cross_dmart_isenes_kpis where month=%d and year=%d;"
#define QUERY_UPDATE_INSERT_NEW_CROSS_DMART_ISENES_KPIS "update esgf_dashboard.cross_dmart_isenes_kpis b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, number_of_replica_downloads = a.number_of_replica_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, host_name = a.host_name, eu=a.eu, month=a.month, year=a.year FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, fact.host_name as host_name, (CASE WHEN ct.continent_code='EU' THEN true ELSE false END) as eu, date.month as month, date.year as year FROM esgf_dashboard.cross_fact_download AS fact JOIN esgf_dashboard.cross_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cross_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key JOIN esgf_dashboard.country AS ct ON geo.country_id=ct.country_id WHERE size <> -1 and date.month=%d and date.year=%d and (CASE WHEN ct.continent_code='EU' THEN true ELSE false END)='%s' GROUP BY host_name, eu, month, year ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.eu='%s';" 
#define QUERY_SELECT_INSERT_NEW_CROSS_DMART_ISENES_KPIS_UPDATE "INSERT INTO esgf_dashboard.cross_dmart_isenes_kpis(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, host_name, eu, month, year) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, fact.host_name, (CASE WHEN ct.continent_code='EU' THEN true ELSE false END) as eu, date.month, date.year FROM esgf_dashboard.cross_fact_download AS fact JOIN esgf_dashboard.cross_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cross_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key JOIN esgf_dashboard.country AS ct ON geo.country_id=ct.country_id WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.cross_dim_date where month=%d and year=%d) GROUP BY host_name, eu, month, year ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_OBS4MIPS_DMART_PROJECT_HOST_POS "select month, year from esgf_dashboard.obs4mips_dmart_clients_host_time_geolocation where dmart_key=%d;"
#define QUERY_SELECT_OBS4MIPS_DMART_POS_DATE "select distinct geo.latitude, geo.longitude from esgf_dashboard.obs4mips_fact_download as fact, esgf_dashboard.obs4mips_dim_geolocation as geo where fact.geolocation_key=geo.geolocation_key;"
#define QUERY_SELECT_OBS4MIPS_DMART_EXIST_POS_DATE "select * from esgf_dashboard.obs4mips_dmart_clients_host_geolocation where latitude=%s and longitude=%s;"
#define QUERY_SELECT_CMIP5_DMART_PROJECT_HOST_POS "select month, year from esgf_dashboard.cmip5_dmart_clients_host_time_geolocation where dmart_key=%d;"
#define QUERY_SELECT_CMIP5_DMART_POS_DATE "select distinct geo.latitude, geo.longitude from esgf_dashboard.cmip5_fact_download as fact, esgf_dashboard.cmip5_dim_geolocation as geo where fact.geolocation_key=geo.geolocation_key;"
#define QUERY_SELECT_CMIP5_DMART_EXIST_POS_DATE "select * from esgf_dashboard.cmip5_dmart_clients_host_geolocation where latitude=%s and longitude=%s;"
#define QUERY_SELECT_OBS4MIPS_DMART_VARIABLE_HOST_TIME "select month, year from esgf_dashboard.obs4mips_dmart_variable_host_time where dmart_key=%d;"
#define QUERY_SELECT_OBS4MIPS_DMART_VAR_DATE "select distinct date.month, date.year, var.variable_code, var.variable_long_name, var.cf_standard_name from esgf_dashboard.obs4mips_fact_download as fact, esgf_dashboard.obs4mips_dim_date as date, esgf_dashboard.obs4mips_bridge_variable as bri, esgf_dashboard.obs4mips_dim_variable as var where fact.date_key=date.date_key and fact.variable_group_key=bri.variable_group_key and bri.variable_key=var.variable_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_OBS4MIPS_DMART_EXIST_VAR_DATE "select * from esgf_dashboard.obs4mips_dmart_variable_host_time where month=%d and year=%d and variable_code='%s' and variable_long_name='%s' and cf_standard_name='%s';"
#define QUERY_SELECT_OBS4MIPS_DMART_SOURCE_HOST_TIME "select month, year from esgf_dashboard.obs4mips_dmart_source_host_time where dmart_key=%d;"
#define QUERY_SELECT_OBS4MIPS_DMART_SRC_DATE "select distinct date.month, date.year, src.source_id_name from esgf_dashboard.obs4mips_fact_download as fact, esgf_dashboard.obs4mips_dim_date as date, esgf_dashboard.obs4mips_bridge_source_id as bri, esgf_dashboard.obs4mips_dim_source_id as src where fact.date_key=date.date_key and fact.source_id_group_key=bri.source_id_group_key and bri.source_id_key=src.source_id_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_OBS4MIPS_DMART_EXIST_SRC_DATE "select * from esgf_dashboard.obs4mips_dmart_source_host_time where month=%d and year=%d and source_id_name='%s';"
#define QUERY_SELECT_OBS4MIPS_DMART_REALM_HOST_TIME "select month, year from esgf_dashboard.obs4mips_dmart_realm_host_time where dmart_key=%d;"
#define QUERY_SELECT_OBS4MIPS_DMART_RLM_DATE "select distinct date.month, date.year, rlm.realm_name from esgf_dashboard.obs4mips_fact_download as fact, esgf_dashboard.obs4mips_dim_date as date, esgf_dashboard.obs4mips_bridge_realm as bri, esgf_dashboard.obs4mips_dim_realm as rlm where fact.date_key=date.date_key and fact.realm_group_key=bri.realm_group_key and bri.realm_key=rlm.realm_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_OBS4MIPS_DMART_EXIST_RLM_DATE "select * from esgf_dashboard.obs4mips_dmart_realm_host_time where month=%d and year=%d and realm_name='%s';"
#define QUERY_SELECT_OBS4MIPS_DMART_DATASET_HOST_TIME "select month, year from esgf_dashboard.obs4mips_dmart_dataset_host_time where dmart_key=%d;"
#define QUERY_SELECT_OBS4MIPS_DMART_DAT_DATE "select distinct date.month, date.year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop from esgf_dashboard.obs4mips_fact_download as fact, esgf_dashboard.obs4mips_dim_date as date, esgf_dashboard.obs4mips_dim_dataset as dat where fact.date_key=date.date_key and fact.dataset_key=dat.dataset_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_OBS4MIPS_DMART_EXIST_DAT_DATE "select * from esgf_dashboard.obs4mips_dmart_dataset_host_time where month=%d and year=%d and dataset_name='%s' and dataset_version=%d and datetime_start='%s' and datetime_stop='%s';"
#define QUERY_SELECT_CMIP5_DMART_DATASET_HOST_TIME "select month, year from esgf_dashboard.cmip5_dmart_dataset_host_time where dmart_key=%d;"
#define QUERY_SELECT_CMIP5_DMART_DAT_DATE "select distinct date.month, date.year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop from esgf_dashboard.cmip5_fact_download as fact, esgf_dashboard.cmip5_dim_date as date, esgf_dashboard.cmip5_dim_dataset as dat where fact.date_key=date.date_key and fact.dataset_key=dat.dataset_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_CMIP5_DMART_EXIST_DAT_DATE "select * from esgf_dashboard.cmip5_dmart_dataset_host_time where month=%d and year=%d and dataset_name='%s' and dataset_version=%d and datetime_start='%s' and datetime_stop='%s';"
#define QUERY_SELECT_CMIP5_DMART_VARIABLE_HOST_TIME "select month, year from esgf_dashboard.cmip5_dmart_variable_host_time where dmart_key=%d;"
#define QUERY_SELECT_CMIP5_DMART_VAR_DATE "select distinct date.month, date.year, var.variable_code, var.variable_long_name, var.cf_standard_name from esgf_dashboard.cmip5_fact_download as fact, esgf_dashboard.cmip5_dim_date as date, esgf_dashboard.cmip5_bridge_variable as bri, esgf_dashboard.cmip5_dim_variable as var where fact.date_key=date.date_key and fact.variable_group_key=bri.variable_group_key and bri.variable_key=var.variable_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_CMIP5_DMART_EXIST_VAR_DATE "select * from esgf_dashboard.cmip5_dmart_variable_host_time where month=%d and year=%d and variable_code='%s' and variable_long_name='%s' and cf_standard_name='%s';"
#define QUERY_SELECT_CMIP5_DMART_MODEL_HOST_TIME "select month, year from esgf_dashboard.cmip5_dmart_model_host_time where dmart_key=%d;"
#define QUERY_SELECT_CMIP5_DMART_MDL_DATE "select distinct date.month, date.year, mdl.model_name from esgf_dashboard.cmip5_fact_download as fact, esgf_dashboard.cmip5_dim_date as date, esgf_dashboard.cmip5_bridge_model as bri, esgf_dashboard.cmip5_dim_model as mdl where fact.date_key=date.date_key and fact.model_group_key=bri.model_group_key and bri.model_key=mdl.model_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_CMIP5_DMART_EXIST_MDL_DATE "select * from esgf_dashboard.cmip5_dmart_model_host_time where month=%d and year=%d and model_name='%s';"
#define QUERY_SELECT_CMIP5_DMART_EXPERIMENT_HOST_TIME "select month, year from esgf_dashboard.cmip5_dmart_experiment_host_time where dmart_key=%d;"
#define QUERY_SELECT_CMIP5_DMART_EXP_DATE "select distinct date.month, date.year, exp.experiment_name from esgf_dashboard.cmip5_fact_download as fact, esgf_dashboard.cmip5_dim_date as date, esgf_dashboard.cmip5_bridge_experiment as bri, esgf_dashboard.cmip5_dim_experiment as exp where fact.date_key=date.date_key and fact.experiment_group_key=bri.experiment_group_key and bri.experiment_key=exp.experiment_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_CMIP5_DMART_EXIST_EXP_DATE "select * from esgf_dashboard.cmip5_dmart_experiment_host_time where month=%d and year=%d and experiment_name='%s';"
// Get list of CROSS DMART PROJECT HOST TIME
#define QUERY_GET_LIST_OF_CROSS_DMART_PROJECT_HOST_POS "SELECT month||':'||year as date_dmart, dmart_key from esgf_dashboard.cross_dmart_project_host_time;"
#define QUERY_GET_LIST_OF_CROSS_DMART_GEOLOCATION "SELECT latitude||':'||longitude||':'||project_name as geo_dmart, dmart_key from esgf_dashboard.cross_dmart_project_host_geolocation;"
#define QUERY_SELECT_INSERT_NEW_CROSS_DMART_PROJECT_HOST_POS "DELETE FROM esgf_dashboard.cross_dmart_project_host_geolocation where host_name='%s'; INSERT INTO esgf_dashboard.cross_dmart_project_host_geolocation(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, host_name, project_name, latitude, longitude, country_id) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, fact.host_name, project.project_name, geo.latitude, geo.longitude, geo.country_id FROM esgf_dashboard.cross_fact_download AS fact JOIN esgf_dashboard.cross_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key JOIN esgf_dashboard.cross_bridge_project AS bridgeproj ON fact.project_group_key = bridgeproj.project_group_key JOIN esgf_dashboard.cross_dim_project AS project ON bridgeproj.project_key = project.project_key WHERE size <> -1 GROUP BY host_name, project_name, geo.latitude, geo.longitude, geo.country_id;"
#define QUERY_UPDATE_INSERT_NEW_CROSS_DMART_PROJECT_HOST_POS "update esgf_dashboard.cross_dmart_project_host_geolocation b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, number_of_replica_downloads = a.number_of_replica_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, host_name = a.host_name, project_name=a.project_name, latitude=a.latitude, longitude=a.longitude, country_id=a.country_id FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, fact.host_name, project.project_name, geo.latitude, geo.longitude, geo.country_id FROM esgf_dashboard.cross_fact_download AS fact JOIN esgf_dashboard.cross_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key JOIN esgf_dashboard.cross_bridge_project AS bridgeproj ON fact.project_group_key = bridgeproj.project_group_key JOIN esgf_dashboard.cross_dim_project AS project ON bridgeproj.project_key = project.project_key WHERE size <> -1 and geo.latitude=%s and geo.longitude=%s and project.project_name='%s' GROUP BY host_name, project_name, geo.latitude, geo.longitude, geo.country_id) AS a WHERE b.latitude=%s and b.longitude=%s and b.project_name='%s';"
#define QUERY_SELECT_INSERT_NEW_CROSS_DMART_PROJECT_HOST_POS_UP "INSERT INTO esgf_dashboard.cross_dmart_project_host_geolocation(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, host_name, project_name, latitude, longitude, country_id) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, fact.host_name, project.project_name, geo.latitude, geo.longitude, geo.country_id FROM esgf_dashboard.cross_fact_download AS fact JOIN esgf_dashboard.cross_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key JOIN esgf_dashboard.cross_bridge_project AS bridgeproj ON fact.project_group_key = bridgeproj.project_group_key JOIN esgf_dashboard.cross_dim_project AS project ON bridgeproj.project_key = project.project_key WHERE size <> -1 and geo.latitude=%s and geo.longitude=%s and project.project_name='%s' GROUP BY host_name, project_name, geo.latitude, geo.longitude, geo.country_id;"
//Queries about Obs4mips
#define QUERY_GET_LIST_OF_OBS_DIM_FILE "SELECT file_name||':'||file_size as name, file_key from esgf_dashboard.obs4mips_dim_file;"
#define QUERY_GET_LIST_OF_OBS_DIM_DATASET "SELECT dataset_name, dataset_key from esgf_dashboard.obs4mips_dim_dataset;"
#define QUERY_GET_LIST_OF_OBS_DIM_INSTITUTE "SELECT institute_name, institute_key from esgf_dashboard.obs4mips_dim_institute;"
#define QUERY_GET_LIST_OF_OBS_DIM_VARIABLE "SELECT cf_standard_name||':'||variable_long_name||':'||variable_code as name, variable_key from esgf_dashboard.obs4mips_dim_variable;"
#define QUERY_GET_LIST_OF_OBS_DIM_TIME_FREQUENCY "SELECT time_frequency_value, time_frequency_key from esgf_dashboard.obs4mips_dim_time_frequency;"
#define QUERY_GET_LIST_OF_OBS_DIM_INDEX_NODE "SELECT index_node_name, index_node_key from esgf_dashboard.obs4mips_dim_index_node;"
#define QUERY_GET_LIST_OF_OBS_DIM_PROCESSING_LEVEL "SELECT processing_level_name, processing_level_key from esgf_dashboard.obs4mips_dim_processing_level;"
#define QUERY_GET_LIST_OF_OBS_DIM_SOURCE_ID "SELECT source_id_name, source_id_key from esgf_dashboard.obs4mips_dim_source_id;"
#define QUERY_GET_LIST_OF_OBS_DIM_REALM "SELECT realm_name, realm_key from esgf_dashboard.obs4mips_dim_realm;"
#define QUERY_GET_LIST_OF_OBS_DIM_INDEX "SELECT index_node_name, index_node_key from esgf_dashboard.obs4mips_dim_index_node;"
// Insert new file adds a new file in the database
#define QUERY_INSERT_NEW_FILE "INSERT into esgf_dashboard.obs4mips_dim_file(file_name,file_size) values('%s',%ld);"
// Retrieve the id value of a specific file
#define QUERY_GET_FILE_ID "SELECT file_key from esgf_dashboard.obs4mips_dim_file where file_name='%s' and file_size=%ld;"
// Insert new dataset adds a new dataset in the database
#define QUERY_INSERT_NEW_DATASET_OBS "INSERT into esgf_dashboard.obs4mips_dim_dataset(dataset_name,dataset_version,datetime_start,datetime_stop) values('%s',%d,'%s','%s');"
// Insert new index_node adds a new index_node in the database
#define QUERY_INSERT_NEW_INDEX_NODE_OBS "INSERT into esgf_dashboard.obs4mips_dim_index_node(index_node_name) values('%s');"
// Retrieve the id value of a specific dataset
#define QUERY_GET_DATASET_OBS_ID "SELECT dataset_key from esgf_dashboard.obs4mips_dim_dataset where dataset_name='%s';"
// Retrieve the id value of a specific index node
#define QUERY_GET_INDEX_NODE_OBS_ID "SELECT index_node_key from esgf_dashboard.obs4mips_dim_index_node where index_node_name='%s';"
// Insert new institute adds a new institute in the database
#define QUERY_INSERT_OBS_DIM_INSTITUTE "INSERT into esgf_dashboard.obs4mips_dim_institute(institute_name) values('%s');"
// Retrieve the id value of a specific institute
#define QUERY_GET_INSTITUTE_OBS_ID "SELECT institute_key from esgf_dashboard.obs4mips_dim_institute where institute_name='%s';"
// Retrieve the max group id of institute 
#define QUERY_INST_GET_MAX_GROUP_OBS_ID "SELECT MAX(institute_group_key) AS max_bridge_inst from esgf_dashboard.obs4mips_bridge_institute;"
// QUERY_INSERT_OBS_BRIDGE_INSTITUTE adds a new institute related to the downloaded file in the database
#define QUERY_INSERT_OBS_BRIDGE_INSTITUTE "INSERT into esgf_dashboard.obs4mips_bridge_institute(institute_key,institute_group_key) values(%d,%d);"
// Get list of OBS BRIDGE INSTITUTE 
#define QUERY_GET_LIST_OF_OBS_BRIDGE_INSTITUTE "SELECT institute_group_key, institute_key from esgf_dashboard.obs4mips_bridge_institute;"
// Get list of OBS BRIDGE INSTITUTE TMP
#define QUERY_GET_LIST_OF_OBS_BRIDGE_INSTITUTE_TMP "SELECT array_to_string(array(SELECT s.institute_key FROM esgf_dashboard.obs4mips_bridge_institute s where s.institute_group_key=b.institute_group_key order by s.institute_key ASC), ',') AS institute_key,b.institute_group_key FROM esgf_dashboard.obs4mips_bridge_institute b GROUP BY institute_group_key order BY b.institute_group_key ASC;"

// Insert new variable adds a new variable in the database
#define QUERY_INSERT_OBS_DIM_VARIABLE "INSERT into esgf_dashboard.obs4mips_dim_variable(cf_standard_name,variable_long_name,variable_code) values('%s','%s','%s');"
// Retrieve the id value of a specific variable
#define QUERY_GET_VARIABLE_OBS_ID "SELECT variable_key from esgf_dashboard.obs4mips_dim_variable where cf_standard_name='%s' and variable_long_name='%s' and variable_code='%s';"
// Retrieve the max group id of variable
#define QUERY_VAR_GET_MAX_GROUP_OBS_ID "SELECT MAX(variable_group_key) AS max_bridge_var from esgf_dashboard.obs4mips_bridge_variable;"
// QUERY_INSERT_OBS_BRIDGE_VARIABLE adds a new variable related to the downloaded file in the database
#define QUERY_INSERT_OBS_BRIDGE_VARIABLE "INSERT into esgf_dashboard.obs4mips_bridge_variable(variable_key,variable_group_key) values(%d,%d);"
// Get list of OBS BRIDGE VARIABLE 
#define QUERY_GET_LIST_OF_OBS_BRIDGE_VARIABLE "SELECT variable_group_key, variable_key from esgf_dashboard.obs4mips_bridge_variable;"
// Get list of OBS BRIDGE INSTITUTE TMP 
#define QUERY_GET_LIST_OF_OBS_BRIDGE_VARIABLE_TMP "SELECT array_to_string(array(SELECT s.variable_key FROM esgf_dashboard.obs4mips_bridge_variable s where s.variable_group_key=b.variable_group_key order by s.variable_key ASC), ',') AS variable_key,b.variable_group_key FROM esgf_dashboard.obs4mips_bridge_variable b GROUP BY variable_group_key order BY b.variable_group_key ASC;"
// Insert new time_frequency adds a new time_frequency in the database
#define QUERY_INSERT_OBS_DIM_TIME_FREQUENCY "INSERT into esgf_dashboard.obs4mips_dim_time_frequency(time_frequency_value) values('%s');"
// Retrieve the id value of a specific time_frequency 
#define QUERY_GET_TIME_FREQ_OBS_ID "SELECT time_frequency_key from esgf_dashboard.obs4mips_dim_time_frequency where time_frequency_value='%s';"
// Retrieve the max group id of time_frequency
#define QUERY_TIME_FREQ_GET_MAX_GROUP_OBS_ID "SELECT MAX(time_frequency_group_key) AS max_bridge_time_freq from esgf_dashboard.obs4mips_bridge_time_frequency;"
// QUERY_INSERT_OBS_BRIDGE_TIME_FREQUENCY adds a new time_frequency related to the downloaded file in the database
#define QUERY_INSERT_OBS_BRIDGE_TIME_FREQUENCY "INSERT into esgf_dashboard.obs4mips_bridge_time_frequency(time_frequency_key,time_frequency_group_key) values(%d,%d);"
// Get list of OBS BRIDGE TIME_FREQUENCY 
#define QUERY_GET_LIST_OF_OBS_BRIDGE_TIME_FREQUENCY "SELECT time_frequency_group_key, time_frequency_key from esgf_dashboard.obs4mips_bridge_time_frequency;"
// Get list of OBS BRIDGE TIME_FREQUENCY TMP 
#define QUERY_GET_LIST_OF_OBS_BRIDGE_TIME_FREQUENCY_TMP "SELECT array_to_string(array(SELECT s.time_frequency_key FROM esgf_dashboard.obs4mips_bridge_time_frequency s where s.time_frequency_group_key=b.time_frequency_group_key order by s.time_frequency_key ASC), ',') AS time_frequency_key,b.time_frequency_group_key FROM esgf_dashboard.obs4mips_bridge_time_frequency b GROUP BY time_frequency_group_key order BY b.time_frequency_group_key ASC;"
// Get list of OBS BRIDGE PROCESSING_LEVEL 
#define QUERY_GET_LIST_OF_OBS_BRIDGE_PROCESSING_LEVEL "SELECT processing_level_group_key, processing_level_key from esgf_dashboard.obs4mips_bridge_processing_level;"
// Get list of OBS BRIDGE PROCESSING LEVEL TMP 
#define QUERY_GET_LIST_OF_OBS_BRIDGE_PROCESSING_LEVEL_TMP "SELECT array_to_string(array(SELECT s.processing_level_key FROM esgf_dashboard.obs4mips_bridge_processing_level s where s.processing_level_group_key=b.processing_level_group_key order by s.processing_level_key ASC), ',') AS processing_level_key,b.processing_level_group_key FROM esgf_dashboard.obs4mips_bridge_processing_level b GROUP BY processing_level_group_key order BY b.processing_level_group_key ASC;"
// Insert new processing_level adds a new processing level in the database
#define QUERY_INSERT_OBS_DIM_PROCESSING_LEVEL "INSERT into esgf_dashboard.obs4mips_dim_processing_level(processing_level_name) values('%s');"
// Retrieve the id value of a specific processing level 
#define QUERY_GET_PROC_LEV_OBS_ID "SELECT processing_level_key from esgf_dashboard.obs4mips_dim_processing_level where processing_level_name='%s';"
// Retrieve the max group id of processing level
#define QUERY_PROC_LEV_GET_MAX_GROUP_OBS_ID "SELECT MAX(processing_level_group_key) AS max_bridge_proc_lev from esgf_dashboard.obs4mips_bridge_processing_level;"
// QUERY_INSERT_OBS_BRIDGE_PROCESSING_LEVEL adds a new processing_level related to the downloaded file in the database
#define QUERY_INSERT_OBS_BRIDGE_PROCESSING_LEVEL "INSERT into esgf_dashboard.obs4mips_bridge_processing_level(processing_level_key,processing_level_group_key) values(%d,%d);"
// Get list of OBS BRIDGE SOURCE ID 
#define QUERY_GET_LIST_OF_OBS_BRIDGE_SOURCE_ID "SELECT source_id_group_key, source_id_key from esgf_dashboard.obs4mips_bridge_source_id;"
// Get list of OBS BRIDGE SOURCE ID TMP 
#define QUERY_GET_LIST_OF_OBS_BRIDGE_SOURCE_ID_TMP "SELECT array_to_string(array(SELECT s.source_id_key FROM esgf_dashboard.obs4mips_bridge_source_id s where s.source_id_group_key=b.source_id_group_key order by s.source_id_key ASC), ',') AS source_id_key,b.source_id_group_key FROM esgf_dashboard.obs4mips_bridge_source_id b GROUP BY source_id_group_key order BY b.source_id_group_key ASC;"
// Insert new source id adds a new source id in the database
#define QUERY_INSERT_OBS_DIM_SOURCE_ID "INSERT into esgf_dashboard.obs4mips_dim_source_id(source_id_name) values('%s');"
// Retrieve the id value of a specific source id 
#define QUERY_GET_SOURCE_ID_ID "SELECT source_id_key from esgf_dashboard.obs4mips_dim_source_id where source_id_name='%s';"
// Retrieve the max group id of the source id
#define QUERY_SOURCE_ID_GET_MAX_GROUP_ID "SELECT MAX(source_id_group_key) AS max_bridge_source_id from esgf_dashboard.obs4mips_bridge_source_id;"
// QUERY_INSERT_OBS_BRIDGE_SOURCE_ID adds a new source_id related to the downloaded file in the database
#define QUERY_INSERT_OBS_BRIDGE_SOURCE_ID "INSERT into esgf_dashboard.obs4mips_bridge_source_id(source_id_key,source_id_group_key) values(%d,%d);"
// Get list of OBS BRIDGE REALM 
#define QUERY_GET_LIST_OF_OBS_BRIDGE_REALM "SELECT realm_group_key, realm_key from esgf_dashboard.obs4mips_bridge_realm;"
// Get list of OBS BRIDGE REALM TMP 
#define QUERY_GET_LIST_OF_OBS_BRIDGE_REALM_TMP "SELECT array_to_string(array(SELECT s.realm_key FROM esgf_dashboard.obs4mips_bridge_realm s where s.realm_group_key=b.realm_group_key order by s.realm_key ASC), ',') AS realm_key,b.realm_group_key FROM esgf_dashboard.obs4mips_bridge_realm b GROUP BY realm_group_key order BY b.realm_group_key ASC;"
// Insert new realm adds a new realm in the database
#define QUERY_INSERT_OBS_DIM_REALM "INSERT into esgf_dashboard.obs4mips_dim_realm(realm_name) values('%s');"
// Retrieve the id value of a specific realm
#define QUERY_GET_REALM_OBS_ID "SELECT realm_key from esgf_dashboard.obs4mips_dim_realm where realm_name='%s';"
// Retrieve the max group id of the realm
#define QUERY_REALM_GET_MAX_GROUP_OBS_ID "SELECT MAX(realm_group_key) AS max_bridge_realm from esgf_dashboard.obs4mips_bridge_realm;"
// QUERY_INSERT_OBS_BRIDGE_REALM adds a new realm related to the downloaded file in the database
#define QUERY_INSERT_OBS_BRIDGE_REALM "INSERT into esgf_dashboard.obs4mips_bridge_realm(realm_key,realm_group_key) values(%d,%d);"
// QUERY_INSERT_OBS_FACT_DOWNLOAD adds a new fact related to the downloaded file in the database
#define QUERY_INSERT_OBS_FACT_DOWNLOAD "INSERT into esgf_dashboard.obs4mips_fact_download(size,success,duration,user_id_hash,host_name, user_idp,hour, minute, index_node_name, dataset_key, file_key, geolocation_key,date_key, institute_group_key, variable_group_key, time_frequency_group_key, processing_level_group_key, source_id_group_key, realm_group_key, id_query) values(%ld,'%s',%d,'%s','%s','%s','%s','%s','%s',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d);"
// Get list of OBS DIM DATE
#define QUERY_GET_LIST_OF_OBS_DIM_DATE "SELECT download_date,date_key from esgf_dashboard.obs4mips_dim_date;"
// Get list of OBS DIM GEOLOCATION 
#define QUERY_GET_LIST_OF_OBS_DIM_GEOLOCATION "SELECT (CAST(latitude as numeric(14,11)))||':'||(CAST(longitude as numeric(14,11))) AS name,geolocation_key from esgf_dashboard.obs4mips_dim_geolocation;"
// Insert new date adds a new date in the database
#define QUERY_INSERT_NEW_OBS_DATE "INSERT into esgf_dashboard.obs4mips_dim_date(download_date,month,year) values('%s','%s','%s');"
// Retrieve the id value of a specific date
#define QUERY_GET_OBS_DATE_ID "SELECT date_key from esgf_dashboard.obs4mips_dim_date where download_date='%s';"
// QUERY_INSERT_OBS_DIM_GEOLOCATION adds a new geolocation of the downloaded file in the database
#define QUERY_INSERT_OBS_DIM_GEOLOCATION "INSERT into esgf_dashboard.obs4mips_dim_geolocation(latitude,longitude,country_id) values(%14.11f,%14.11f,%d);"
//Select the geolocation_id starting from latitude and longitude
#define QUERY_GET_GEO_OBS_ID "SELECT geolocation_key from esgf_dashboard.obs4mips_dim_geolocation where latitude=%14.11f and longitude=%14.11f;"
//NEW_OBS4MIPS_DMART_CLIENTS_HOST_TIME_GEOLOCATION
#define QUERY_SELECT_INSERT_NEW_OBS4MIPS_DMART_CLIENTS_HOST_TIME_GEOLOCATION "DELETE FROM esgf_dashboard.obs4mips_dmart_clients_host_geolocation where host_name='%s'; INSERT INTO esgf_dashboard.obs4mips_dmart_clients_host_geolocation(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, latitude, longitude, country_id, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, geo.latitude, geo.longitude, geo.country_id, fact.host_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key WHERE size <> -1 GROUP BY host_name, geo.latitude, geo.longitude, geo.country_id;"
#define QUERY_UPDATE_INSERT_NEW_OBS4MIPS_DMART_CLIENTS_HOST_TIME_GEOLOCATION "update esgf_dashboard.obs4mips_dmart_clients_host_geolocation b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, latitude = a.latitude, longitude=a.longitude, country_id=a.country_id, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, geo.latitude as latitude, geo.longitude as longitude, geo.country_id as country_id, fact.host_name as host_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key WHERE size <> -1 and geo.latitude=%s and geo.longitude=%s GROUP BY host_name, latitude, longitude, country_id) AS a WHERE b.latitude=%s and b.longitude=%s;"
#define QUERY_SELECT_INSERT_UPDATE_NEW_OBS4MIPS_DMART_CLIENTS_HOST_TIME_GEOLOCATION "INSERT INTO esgf_dashboard.obs4mips_dmart_clients_host_geolocation(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, latitude, longitude, country_id, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, geo.latitude, geo.longitude, fact.host_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key WHERE size <> -1 and geo.latitude=%s and geo.longitude=%s GROUP BY host_name, geo.latitude, geo.longitude, geo.country_id;"
#define QUERY_SELECT_INSERT_UPDATE_OBS4MIPS_DMART_CLIENTS_HOST_TIME_GEOLOCATION "INSERT INTO esgf_dashboard.obs4mips_dmart_clients_host_geolocation(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, latitude, longitude, country_id, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, geo.latitude, geo.longitude, geo.country_id, fact.host_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.obs4mips_dim_date where month=%d and year=%d) GROUP BY host_name, geo.latitude, geo.longitude;"
//NEW_OBS4MIPS_DMART_CLIENTS_VARIABLE_HOST_TIME
#define QUERY_SELECT_INSERT_NEW_OBS4MIPS_DMART_VARIABLE_HOST_TIME "DELETE FROM esgf_dashboard.obs4mips_dmart_variable_host_time where host_name='%s'; INSERT INTO esgf_dashboard.obs4mips_dmart_variable_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, host_name, variable_code, variable_long_name, cf_standard_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, var.variable_code, var.variable_long_name, var.cf_standard_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_bridge_variable AS bridgevar ON fact.variable_group_key = bridgevar.variable_group_key JOIN esgf_dashboard.obs4mips_dim_variable AS var ON bridgevar.variable_key=var.variable_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, var.variable_code, var.variable_long_name, var.cf_standard_name ORDER BY date.year, date.month ASC;"
#define QUERY_UPDATE_INSERT_NEW_OBS4MIPS_DMART_VARIABLE_HOST_TIME "update esgf_dashboard.obs4mips_dmart_variable_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, month=a.month, year=a.year, variable_code = a.variable_code, variable_long_name=a.variable_long_name, cf_standard_name=a.cf_standard_name, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month as month, date.year as year, var.variable_code as variable_code, var.variable_long_name as variable_long_name, var.cf_standard_name as cf_standard_name, fact.host_name as host_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_bridge_variable AS bridgevar ON fact.variable_group_key = bridgevar.variable_group_key JOIN esgf_dashboard.obs4mips_dim_variable AS var ON bridgevar.variable_key=var.variable_key WHERE size <> -1 and date.month=%d and date.year=%d and var.variable_code='%s' and var.variable_long_name='%s' and var.cf_standard_name='%s' GROUP BY host_name, month, year, variable_code, variable_long_name, cf_standard_name ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.variable_code='%s' and b.variable_long_name='%s' and b.cf_standard_name='%s';"
#define QUERY_SELECT_INSERT_UPDATE_NEW_OBS4MIPS_DMART_VARIABLE_HOST_TIME "INSERT INTO esgf_dashboard.obs4mips_dmart_variable_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, host_name, variable_code, variable_long_name, cf_standard_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, var.variable_code, var.variable_long_name, var.cf_standard_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_bridge_variable AS bridgevar ON fact.variable_group_key = bridgevar.variable_group_key JOIN esgf_dashboard.obs4mips_dim_variable AS var ON bridgevar.variable_key=var.variable_key WHERE size <> -1 and date.month=%d and date.year=%d and var.variable_code='%s' and var.variable_long_name='%s' and var.cf_standard_name='%s' GROUP BY host_name, date.month, date.year, var.variable_code, var.variable_long_name, var.cf_standard_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_OBS4MIPS_VARIABLE_HOST_TIME "INSERT INTO esgf_dashboard.obs4mips_dmart_variable_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, host_name, variable_code, variable_long_name, cf_standard_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, var.variable_code, var.variable_long_name, var.cf_standard_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_bridge_variable AS bridgevar ON fact.variable_group_key = bridgevar.variable_group_key JOIN esgf_dashboard.obs4mips_dim_variable AS var ON bridgevar.variable_key=var.variable_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.obs4mips_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, var.variable_code, var.variable_long_name, var.cf_standard_name ORDER BY date.year, date.month ASC;"

#define QUERY_SELECT_INSERT_NEW_OBS4MIPS_DMART_SOURCE_HOST_TIME "DELETE FROM esgf_dashboard.obs4mips_dmart_source_host_time where host_name='%s'; INSERT INTO esgf_dashboard.obs4mips_dmart_source_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, host_name, source_id_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, src.source_id_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_bridge_source_id AS bridgesrc ON fact.source_id_group_key = bridgesrc.source_id_group_key JOIN esgf_dashboard.obs4mips_dim_source_id AS src ON bridgesrc.source_id_key=src.source_id_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, src.source_id_name ORDER BY date.year, date.month ASC;"
#define QUERY_UPDATE_INSERT_NEW_OBS4MIPS_DMART_SOURCE_HOST_TIME "update esgf_dashboard.obs4mips_dmart_source_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, month=a.month, year=a.year, source_id_name = a.source_id_name, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month as month, date.year as year, src.source_id_name as source_id_name, fact.host_name as host_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_bridge_source_id AS bridgesrc ON fact.source_id_group_key = bridgesrc.source_id_group_key JOIN esgf_dashboard.obs4mips_dim_source_id AS src ON bridgesrc.source_id_key=src.source_id_key WHERE size <> -1 and date.month=%d and date.year=%d and src.source_id_name='%s' GROUP BY host_name, month, year, source_id_name ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.source_id_name='%s';"
#define QUERY_SELECT_INSERT_UPDATE_NEW_OBS4MIPS_DMART_SOURCE_HOST_TIME "INSERT INTO esgf_dashboard.obs4mips_dmart_source_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, host_name, source_id_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, src.source_id_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_bridge_source_id AS bridgesrc ON fact.source_id_group_key = bridgesrc.source_id_group_key JOIN esgf_dashboard.obs4mips_dim_source_id AS src ON bridgesrc.source_id_key=src.source_id_key WHERE size <> -1 and date.month=%d and date.year=%d and src.source_id_name='%s' GROUP BY host_name, date.month, date.year, src.source_id_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_OBS4MIPS_SOURCE_HOST_TIME "INSERT INTO esgf_dashboard.obs4mips_dmart_source_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, host_name, source_id_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, src.source_id_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_bridge_source_id AS bridgesrc ON fact.source_id_group_key = bridgesrc.source_id_group_key JOIN esgf_dashboard.obs4mips_dim_source_id AS src ON bridgesrc.source_id_key=src.source_id_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.obs4mips_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, src.source_id_name ORDER BY date.year, date.month ASC;"
//NEW_OBS4MIPS_DMART_REALM_HOST_TIME
#define QUERY_SELECT_INSERT_NEW_OBS4MIPS_DMART_REALM_HOST_TIME "DELETE FROM esgf_dashboard.obs4mips_dmart_realm_host_time where host_name='%s'; INSERT INTO esgf_dashboard.obs4mips_dmart_realm_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, realm_name, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, rlm.realm_name, fact.host_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_bridge_realm AS bridgerlm ON fact.realm_group_key = bridgerlm.realm_group_key JOIN esgf_dashboard.obs4mips_dim_realm AS rlm ON bridgerlm.realm_key=rlm.realm_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, rlm.realm_name ORDER BY date.year, date.month ASC;"
#define QUERY_UPDATE_INSERT_NEW_OBS4MIPS_DMART_REALM_HOST_TIME "update esgf_dashboard.obs4mips_dmart_realm_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, month=a.month, year=a.year, realm_name = a.realm_name, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month as month, date.year as year, rlm.realm_name as realm_name, fact.host_name as host_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_bridge_realm AS bridgerlm ON fact.realm_group_key = bridgerlm.realm_group_key JOIN esgf_dashboard.obs4mips_dim_realm AS rlm ON bridgerlm.realm_key=rlm.realm_key WHERE size <> -1 and date.month=%d and date.year=%d and rlm.realm_name='%s' GROUP BY host_name, month, year, realm_name ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.realm_name='%s';"
#define QUERY_SELECT_INSERT_UPDATE_NEW_OBS4MIPS_DMART_REALM_HOST_TIME "INSERT INTO esgf_dashboard.obs4mips_dmart_realm_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, host_name, realm_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, rlm.realm_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_bridge_realm AS bridgerlm ON fact.source_id_group_key = bridgerlm.realm_group_key JOIN esgf_dashboard.obs4mips_dim_realm AS rlm ON bridgerlm.realm_key=rlm.realm_key WHERE size <> -1 and date.month=%d and date.year=%d and rlm.realm_name='%s' GROUP BY host_name, date.month, date.year, rlm.realm_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_OBS4MIPS_REALM_HOST_TIME "INSERT INTO esgf_dashboard.obs4mips_dmart_realm_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, host_name, realm_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, rlm.realm_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_bridge_realm AS bridgerlm ON fact.realm_group_key = bridgerlm.realm_group_key JOIN esgf_dashboard.obs4mips_dim_realm AS rlm ON bridgerlm.realm_key=rlm.realm_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.obs4mips_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, rlm.realm_name ORDER BY date.year, date.month ASC;"
//NEW_OBS4MIPS_DMART_DATASET_HOST_TIME
#define QUERY_SELECT_INSERT_NEW_OBS4MIPS_DMART_DATASET_HOST_TIME "DELETE FROM esgf_dashboard.obs4mips_dmart_dataset_host_time where host_name='%s'; INSERT INTO esgf_dashboard.obs4mips_dmart_dataset_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, dataset_name,dataset_version,datetime_start, datetime_stop, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, dat.dataset_name, dat.dataset_version,dat.datetime_start, dat.datetime_stop, fact.host_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_dim_dataset AS dat ON fact.dataset_key = dat.dataset_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop ORDER BY date.year, date.month ASC;"
#define QUERY_UPDATE_INSERT_NEW_OBS4MIPS_DMART_DATASET_HOST_TIME "update esgf_dashboard.obs4mips_dmart_dataset_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, month=a.month, year=a.year, dataset_name=a.dataset_name, dataset_version = a.dataset_version, datetime_start = a.datetime_start, datetime_stop = a.datetime_stop, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month as month, date.year as year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop, fact.host_name as host_name FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_dim_dataset AS dat ON fact.dataset_key = dat.dataset_key WHERE size <> -1 and date.month=%d and date.year=%d and dat.dataset_name='%s' and dat.dataset_version=%d and dat.datetime_start='%s' and dat.datetime_stop='%s' GROUP BY host_name, month, year, dataset_name, dataset_version, datetime_start, datetime_stop ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.dataset_name='%s' and b.dataset_version=%d and b.datetime_start='%s' and b.datetime_stop='%s';"
#define QUERY_SELECT_INSERT_UPDATE_NEW_OBS4MIPS_DMART_DATASET_HOST_TIME "INSERT INTO esgf_dashboard.obs4mips_dmart_dataset_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, host_name, dataset_name, dataset_version, datetime_start, datetime_stop) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_dim_dataset AS dat ON fact.dataset_key = dat.dataset_key WHERE size <> -1 and date.month=%d and date.year=%d and dat.dataset_name='%s' and dat.dataset_version=%d and dat.datetime_start='%s' and dat.datetime_stop='%s' GROUP BY host_name, date.month, date.year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_OBS4MIPS_DATASET_HOST_TIME "INSERT INTO esgf_dashboard.obs4mips_dmart_dataset_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, host_name, dataset_name, dataset_version, datetime_start, datetime_stop) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop FROM esgf_dashboard.obs4mips_fact_download AS fact JOIN esgf_dashboard.obs4mips_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.obs4mips_dim_dataset AS dat ON fact.dataset_key = dat.dataset_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.obs4mips_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop ORDER BY date.year, date.month ASC;"
//Queries about cmip5
#define QUERY_GET_LIST_OF_CMIP5_DIM_DATASET "SELECT dataset_name, dataset_key from esgf_dashboard.cmip5_dim_dataset;"
#define QUERY_GET_LIST_OF_CMIP5_DIM_INSTITUTE "SELECT institute_name, institute_key from esgf_dashboard.cmip5_dim_institute;"
#define QUERY_GET_LIST_OF_CMIP5_DIM_VARIABLE "SELECT cf_standard_name||':'||variable_long_name||':'||variable_code as name, variable_key from esgf_dashboard.cmip5_dim_variable;"
#define QUERY_GET_LIST_OF_CMIP5_DIM_TIME_FREQUENCY "SELECT time_frequency_value, time_frequency_key from esgf_dashboard.cmip5_dim_time_frequency;"
#define QUERY_GET_LIST_OF_CMIP5_DIM_REALM "SELECT realm_name, realm_key from esgf_dashboard.cmip5_dim_realm;"
#define QUERY_GET_LIST_OF_CMIP5_DIM_EXPERIMENT "SELECT experiment_name, experiment_key from esgf_dashboard.cmip5_dim_experiment;"
#define QUERY_GET_LIST_OF_CMIP5_DIM_MODEL "SELECT model_name, model_key from esgf_dashboard.cmip5_dim_model;"
// Get list of CMIP5 BRIDGE INSTITUTE 
#define QUERY_GET_LIST_OF_CMIP5_BRIDGE_INSTITUTE "SELECT institute_group_key, institute_key from esgf_dashboard.cmip5_bridge_institute;"
// Get list of CMIP5 BRIDGE INSTITUTE TMP 
#define QUERY_GET_LIST_OF_CMIP5_BRIDGE_INSTITUTE_TMP "SELECT array_to_string(array(SELECT s.institute_key FROM esgf_dashboard.cmip5_bridge_institute s where s.institute_group_key=b.institute_group_key order by s.institute_key ASC), ',') AS institute_key,b.institute_group_key FROM esgf_dashboard.cmip5_bridge_institute b GROUP BY institute_group_key order BY b.institute_group_key ASC;"
// Get list of CMIP5 BRIDGE VARIABLE 
#define QUERY_GET_LIST_OF_CMIP5_BRIDGE_VARIABLE "SELECT variable_group_key, variable_key from esgf_dashboard.cmip5_bridge_variable;"
// Get list of CMIP5 BRIDGE INSTITUTE TMP 
#define QUERY_GET_LIST_OF_CMIP5_BRIDGE_VARIABLE_TMP "SELECT array_to_string(array(SELECT s.variable_key FROM esgf_dashboard.cmip5_bridge_variable s where s.variable_group_key=b.variable_group_key order by s.variable_key ASC), ',') AS variable_key,b.variable_group_key FROM esgf_dashboard.cmip5_bridge_variable b GROUP BY variable_group_key order BY b.variable_group_key ASC;"
// Get list of CMIP5 BRIDGE TIME_FREQUENCY 
#define QUERY_GET_LIST_OF_CMIP5_BRIDGE_TIME_FREQUENCY "SELECT time_frequency_group_key, time_frequency_key from esgf_dashboard.cmip5_bridge_time_frequency;"
// Get list of CMIP5 BRIDGE TIME_FREQUENCY TMP 
#define QUERY_GET_LIST_OF_CMIP5_BRIDGE_TIME_FREQUENCY_TMP "SELECT array_to_string(array(SELECT s.time_frequency_key FROM esgf_dashboard.cmip5_bridge_time_frequency s where s.time_frequency_group_key=b.time_frequency_group_key order by s.time_frequency_key ASC), ',') AS time_frequency_key,b.time_frequency_group_key FROM esgf_dashboard.cmip5_bridge_time_frequency b GROUP BY time_frequency_group_key order BY b.time_frequency_group_key ASC;"
// Get list of CMIP5 BRIDGE REALM 
#define QUERY_GET_LIST_OF_CMIP5_BRIDGE_REALM "SELECT realm_group_key, realm_key from esgf_dashboard.cmip5_bridge_realm;"
// Get list of CMIP5 BRIDGE REALM TMP 
#define QUERY_GET_LIST_OF_CMIP5_BRIDGE_REALM_TMP "SELECT array_to_string(array(SELECT s.realm_key FROM esgf_dashboard.cmip5_bridge_realm s where s.realm_group_key=b.realm_group_key order by s.realm_key ASC), ',') AS realm_key,b.realm_group_key FROM esgf_dashboard.cmip5_bridge_realm b GROUP BY realm_group_key order BY b.realm_group_key ASC;"
// Get list of CMIP5 DIM DATE
#define QUERY_GET_LIST_OF_CMIP5_DIM_DATE "SELECT download_date,date_key from esgf_dashboard.cmip5_dim_date;"
// Get list of CMIP5 DIM GEOLOCATION 
#define QUERY_GET_LIST_OF_CMIP5_DIM_GEOLOCATION "SELECT (CAST(latitude as numeric(14,11)))||':'||(CAST(longitude as numeric(14,11))) AS name,geolocation_key from esgf_dashboard.cmip5_dim_geolocation;"
// Get list of CMIP5 BRIDGE EXPERIMENT 
#define QUERY_GET_LIST_OF_CMIP5_BRIDGE_EXPERIMENT "SELECT experiment_group_key, experiment_key from esgf_dashboard.cmip5_bridge_experiment;"
// Get list of CMIP5 BRIDGE EXPERIMENT TMP 
#define QUERY_GET_LIST_OF_CMIP5_BRIDGE_EXPERIMENT_TMP "SELECT array_to_string(array(SELECT s.experiment_key FROM esgf_dashboard.cmip5_bridge_experiment s where s.experiment_group_key=b.experiment_group_key order by s.experiment_key ASC), ',') AS experiment_key,b.experiment_group_key FROM esgf_dashboard.cmip5_bridge_experiment b GROUP BY experiment_group_key order BY b.experiment_group_key ASC;"
// Get list of CMIP5 BRIDGE MODEL 
#define QUERY_GET_LIST_OF_CMIP5_BRIDGE_MODEL "SELECT model_group_key, model_key from esgf_dashboard.cmip5_bridge_model;"
// Get list of CMIP5 BRIDGE EXPERIMENT TMP 
#define QUERY_GET_LIST_OF_CMIP5_BRIDGE_MODEL_TMP "SELECT array_to_string(array(SELECT s.model_key FROM esgf_dashboard.cmip5_bridge_model s where s.model_group_key=b.model_group_key order by s.model_key ASC), ',') AS model_key,b.model_group_key FROM esgf_dashboard.cmip5_bridge_model b GROUP BY model_group_key order BY b.model_group_key ASC;"
// Insert new date adds a new date in the database
#define QUERY_INSERT_NEW_CMIP5_DATE "INSERT into esgf_dashboard.cmip5_dim_date(download_date,month,year) values('%s','%s','%s');"
// Retrieve the id value of a specific date
#define QUERY_GET_CMIP5_DATE_ID "SELECT date_key from esgf_dashboard.cmip5_dim_date where download_date='%s';"
// QUERY_INSERT CMIP5_DIM_GEOLOCATION adds a new geolocation of the downloaded file in the database
#define QUERY_INSERT_CMIP5_DIM_GEOLOCATION "INSERT into esgf_dashboard.cmip5_dim_geolocation(latitude,longitude,country_id) values(%14.11f,%14.11f,%d);"
//Select the geolocation_id starting from latitude and longitude
#define QUERY_GET_GEO_CMIP5_ID "SELECT geolocation_key from esgf_dashboard.cmip5_dim_geolocation where latitude=%14.11f and longitude=%14.11f;"
// Insert new institute adds a new institute in the database
#define QUERY_INSERT_CMIP5_DIM_INSTITUTE "INSERT into esgf_dashboard.cmip5_dim_institute(institute_name) values('%s');"
// Retrieve the id value of a specific institute
#define QUERY_GET_INSTITUTE_CMIP5_ID "SELECT institute_key from esgf_dashboard.cmip5_dim_institute where institute_name='%s';"
// Retrieve the max group id of institute
#define QUERY_INST_GET_MAX_GROUP_CMIP5_ID "SELECT MAX(institute_group_key) AS max_bridge_inst from esgf_dashboard.cmip5_bridge_institute;"
// QUERY_INSERT_CMIP5_BRIDGE_INSTITUTE adds a new institute related to the downloaded file in the database
#define QUERY_INSERT_CMIP5_BRIDGE_INSTITUTE "INSERT into esgf_dashboard.cmip5_bridge_institute(institute_key,institute_group_key) values(%d,%d);"
// Insert new variable adds a new variable in the database
#define QUERY_INSERT_CMIP5_DIM_VARIABLE "INSERT into esgf_dashboard.cmip5_dim_variable(cf_standard_name,variable_long_name,variable_code) values('%s','%s','%s');"
// Retrieve the id value of a specific variable
#define QUERY_GET_VARIABLE_CMIP5_ID "SELECT variable_key from esgf_dashboard.cmip5_dim_variable where cf_standard_name='%s' and variable_long_name='%s' and variable_code='%s'"
// Retrieve the max group id of variable
#define QUERY_VAR_GET_MAX_GROUP_CMIP5_ID "SELECT MAX(variable_group_key) AS max_bridge_var from esgf_dashboard.cmip5_bridge_variable;"
// QUERY_INSERT_CMIP5_BRIDGE_VARIABLE adds a new variable related to the downloaded file in the database
#define QUERY_INSERT_CMIP5_BRIDGE_VARIABLE "INSERT into esgf_dashboard.cmip5_bridge_variable(variable_key,variable_group_key) values(%d,%d);"
// Insert new time_frequency adds a new time_frequency in the database
#define QUERY_INSERT_CMIP5_DIM_TIME_FREQUENCY "INSERT into esgf_dashboard.cmip5_dim_time_frequency(time_frequency_value) values('%s');"
// Retrieve the id value of a specific time_frequency 
#define QUERY_GET_TIME_FREQ_CMIP5_ID "SELECT time_frequency_key from esgf_dashboard.cmip5_dim_time_frequency where time_frequency_value='%s';"
// Retrieve the max group id of time_frequency
#define QUERY_TIME_FREQ_GET_MAX_GROUP_CMIP5_ID "SELECT MAX(time_frequency_group_key) AS max_bridge_time_freq from esgf_dashboard.cmip5_bridge_time_frequency;"
// QUERY_INSERT_CMIP5_BRIDGE_TIME_FREQUENCY adds a new time_frequency related to the downloaded file in the database
#define QUERY_INSERT_CMIP5_BRIDGE_TIME_FREQUENCY "INSERT into esgf_dashboard.cmip5_bridge_time_frequency(time_frequency_key,time_frequency_group_key) values(%d,%d);"
// Retrieve the id value of a specific processing level 
#define QUERY_GET_PROC_LEV_CMIP5_ID "SELECT processing_level_key from esgf_dashboard.cmip5_dim_processing_level where processing_level_name='%s';"
// Retrieve the max group id of processing level
#define QUERY_PROC_LEV_GET_MAX_GROUP_CMIP5_ID "SELECT MAX(processing_level_group_key) AS max_bridge_proc_lev from esgf_dashboard.cmip5_bridge_processing_level;"
// QUERY_INSERT_CMIP5_BRIDGE_PROCESSING_LEVEL adds a new processing_level related to the downloaded file in the database
#define QUERY_INSERT_CMIP5_DIM_REALM "INSERT into esgf_dashboard.cmip5_dim_realm(realm_name) values('%s');"
// Retrieve the id value of a specific realm
#define QUERY_GET_REALM_CMIP5_ID "SELECT realm_key from esgf_dashboard.cmip5_dim_realm where realm_name='%s';"
// Retrieve the max group id of the realm
#define QUERY_REALM_GET_MAX_GROUP_CMIP5_ID "SELECT MAX(realm_group_key) AS max_bridge_realm from esgf_dashboard.cmip5_bridge_realm;"
// QUERY_INSERT_CMIP5_BRIDGE_REALM adds a new realm related to the downloaded file in the database
#define QUERY_INSERT_CMIP5_BRIDGE_REALM "INSERT into esgf_dashboard.cmip5_bridge_realm(realm_key,realm_group_key) values(%d,%d);"
//Insert new model adds a new model in the database
#define QUERY_INSERT_CMIP5_DIM_MODEL "INSERT into esgf_dashboard.cmip5_dim_model(model_name) values('%s');"
// Retrieve the id value of a specific model
#define QUERY_GET_MODEL_CMIP5_ID "SELECT model_key from esgf_dashboard.cmip5_dim_model where model_name='%s';"
// Retrieve the max group id of the model
#define QUERY_MODEL_GET_MAX_GROUP_CMIP5_ID "SELECT MAX(model_group_key) AS max_bridge_model from esgf_dashboard.cmip5_bridge_model;"
// QUERY_INSERT_CMIP5_BRIDGE_MODEL adds a new model related to the downloaded file in the database
#define QUERY_INSERT_CMIP5_BRIDGE_MODEL "INSERT into esgf_dashboard.cmip5_bridge_model(model_key,model_group_key) values(%d,%d);"
//Insert new experiment adds a new experiment in the database
#define QUERY_INSERT_CMIP5_DIM_EXPERIMENT "INSERT into esgf_dashboard.cmip5_dim_experiment(experiment_name) values('%s');"
// Retrieve the id value of a specific experiment
#define QUERY_GET_EXPERIMENT_CMIP5_ID "SELECT experiment_key from esgf_dashboard.cmip5_dim_experiment where experiment_name='%s';"
// Retrieve the max group id of the experiment
#define QUERY_EXPERIMENT_GET_MAX_GROUP_CMIP5_ID "SELECT MAX(experiment_group_key) AS max_bridge_experiment from esgf_dashboard.cmip5_bridge_experiment;"
// QUERY_INSERT_CMIP5_BRIDGE_EXPERIMENT adds a new experiment related to the downloaded file in the database
#define QUERY_INSERT_CMIP5_BRIDGE_EXPERIMENT "INSERT into esgf_dashboard.cmip5_bridge_experiment(experiment_key,experiment_group_key) values(%d,%d);"
// Insert new dataset adds a new dataset in the database
#define QUERY_INSERT_NEW_DATASET_CMIP5 "INSERT into esgf_dashboard.cmip5_dim_dataset(dataset_name,dataset_version,datetime_start,datetime_stop) values('%s',%d,'%s','%s');"
// Retrieve the id value of a specific dataset
#define QUERY_GET_DATASET_CMIP5_ID "SELECT dataset_key from esgf_dashboard.cmip5_dim_dataset where dataset_name='%s';"
// QUERY_INSERT_CMIP5_FACT_DOWNLOAD adds a new fact related to the downloaded file in the database
#define QUERY_INSERT_CMIP5_FACT_DOWNLOAD "INSERT into esgf_dashboard.cmip5_fact_download(size,success,duration,replica, host_name, hour, minute, user_id_hash, user_idp, date_key, geolocation_key, dataset_key, time_frequency_group_key, variable_group_key, experiment_group_key, model_group_key, realm_group_key, institute_group_key, id_query) values(%ld,'%s',%d,'%s','%s','%s','%s','%s','%s',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d);"
//NEW_CMIP5_DMART_CLIENTS_HOST_TIME_GEOLOCATION
#define QUERY_SELECT_INSERT_NEW_CMIP5_DMART_CLIENTS_HOST_TIME_GEOLOCATION "DELETE FROM esgf_dashboard.cmip5_dmart_clients_host_geolocation where host_name='%s'; INSERT INTO esgf_dashboard.cmip5_dmart_clients_host_geolocation(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, latitude, longitude, country_id, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, geo.latitude, geo.longitude, geo.country_id, fact.host_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key WHERE size <> -1 GROUP BY host_name, geo.latitude, geo.longitude, geo.country_id;"
#define QUERY_UPDATE_INSERT_NEW_CMIP5_DMART_CLIENTS_HOST_TIME_GEOLOCATION "update esgf_dashboard.cmip5_dmart_clients_host_geolocation b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, number_of_replica_downloads=a.number_of_replica_downloads, latitude = a.latitude, longitude=a.longitude, country_id=a.country_id, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, geo.latitude as latitude, geo.longitude as longitude, geo.country_id as country_id, fact.host_name as host_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key WHERE size <> -1 and geo.latitude=%s and geo.longitude=%s GROUP BY host_name, latitude, longitude, country_id) AS a WHERE b.latitude=%s and b.longitude=%s;"
#define QUERY_SELECT_INSERT_UPDATE_NEW_CMIP5_DMART_CLIENTS_HOST_TIME_GEOLOCATION "INSERT INTO esgf_dashboard.cmip5_dmart_clients_host_geolocation(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads,latitude, longitude, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, geo.latitude, geo.longitude, fact.host_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key WHERE size <> -1 and geo.latitude=%s and geo.longitude=%s GROUP BY host_name, geo.latitude, geo.longitude;"
#define QUERY_SELECT_INSERT_UPDATE_CMIP5_DMART_CLIENTS_HOST_TIME_GEOLOCATION "INSERT INTO esgf_dashboard.cmip5_dmart_clients_host_time_geolocation(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, latitude, longitude, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, geo.latitude, geo.longitude, fact.host_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.cmip5_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, geo.latitude, geo.longitude ORDER BY date.year, date.month ASC;"
//NEW_CMIP5_DMART_VARIABLE_HOST_TIME
#define QUERY_SELECT_INSERT_NEW_CMIP5_DMART_VARIABLE_HOST_TIME "DELETE FROM esgf_dashboard.cmip5_dmart_variable_host_time where host_name='%s'; INSERT INTO esgf_dashboard.cmip5_dmart_variable_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, variable_code, variable_long_name, cf_standard_name, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, var.variable_code, var.variable_long_name, var.cf_standard_name, fact.host_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_bridge_variable AS bridgevar ON fact.variable_group_key = bridgevar.variable_group_key JOIN esgf_dashboard.cmip5_dim_variable AS var ON bridgevar.variable_key=var.variable_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, var.variable_code, var.variable_long_name, var.cf_standard_name ORDER BY date.year, date.month ASC;"
#define QUERY_UPDATE_INSERT_NEW_CMIP5_DMART_VARIABLE_HOST_TIME "update esgf_dashboard.cmip5_dmart_variable_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, number_of_replica_downloads=a.number_of_replica_downloads, month=a.month, year=a.year, variable_code = a.variable_code, variable_long_name=a.variable_long_name, cf_standard_name=a.cf_standard_name, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month as month, date.year as year, var.variable_code as variable_code, var.variable_long_name as variable_long_name, var.cf_standard_name as cf_standard_name, fact.host_name as host_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_bridge_variable AS bridgevar ON fact.variable_group_key = bridgevar.variable_group_key JOIN esgf_dashboard.cmip5_dim_variable AS var ON bridgevar.variable_key=var.variable_key WHERE size <> -1 and date.month=%d and date.year=%d and var.variable_code='%s' and var.variable_long_name='%s' and var.cf_standard_name='%s' GROUP BY host_name, month, year, variable_code, variable_long_name, cf_standard_name ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.variable_code='%s' and b.variable_long_name='%s' and b.cf_standard_name='%s';"
#define QUERY_SELECT_INSERT_UPDATE_NEW_CMIP5_DMART_VARIABLE_HOST_TIME "INSERT INTO esgf_dashboard.cmip5_dmart_variable_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_replica_downloads,number_of_users, month, year, host_name, variable_code, variable_long_name, cf_standard_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, var.variable_code, var.variable_long_name, var.cf_standard_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_bridge_variable AS bridgevar ON fact.variable_group_key = bridgevar.variable_group_key JOIN esgf_dashboard.cmip5_dim_variable AS var ON bridgevar.variable_key=var.variable_key WHERE size <> -1 and date.month=%d and date.year=%d and var.variable_code='%s' and var.variable_long_name='%s' and var.cf_standard_name='%s' GROUP BY host_name, date.month, date.year, var.variable_code, var.variable_long_name, var.cf_standard_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_CMIP5_VARIABLE_HOST_TIME "INSERT INTO esgf_dashboard.cmip5_dmart_variable_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, host_name, variable_code, variable_long_name, cf_standard_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, var.variable_code, var.variable_long_name, var.cf_standard_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_bridge_variable AS bridgevar ON fact.variable_group_key = bridgevar.variable_group_key JOIN esgf_dashboard.cmip5_dim_variable AS var ON bridgevar.variable_key=var.variable_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.cmip5_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, var.variable_code, var.variable_long_name, var.cf_standard_name ORDER BY date.year, date.month ASC;"
//NEW_CMIP5_DMART_MODEL_HOST_TIME
#define QUERY_SELECT_INSERT_NEW_CMIP5_DMART_MODEL_HOST_TIME "DELETE FROM esgf_dashboard.cmip5_dmart_model_host_time where host_name='%s'; INSERT INTO esgf_dashboard.cmip5_dmart_model_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, model_name, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, mdl.model_name, fact.host_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_bridge_model AS bridgemdl ON fact.model_group_key = bridgemdl.model_group_key JOIN esgf_dashboard.cmip5_dim_model AS mdl ON bridgemdl.model_key=mdl.model_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, mdl.model_name ORDER BY date.year, date.month ASC;"
#define QUERY_UPDATE_INSERT_NEW_CMIP5_DMART_MODEL_HOST_TIME "update esgf_dashboard.cmip5_dmart_model_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, number_of_replica_downloads=a.number_of_replica_downloads, month=a.month, year=a.year, host_name = a.host_name, model_name=a.model_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month as month, date.year as year, fact.host_name as host_name, mdl.model_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_bridge_model AS bridgemdl ON fact.model_group_key = bridgemdl.model_group_key JOIN esgf_dashboard.cmip5_dim_model AS mdl ON bridgemdl.model_key=mdl.model_key WHERE size <> -1 and date.month=%d and date.year=%d and mdl.model_name='%s' GROUP BY host_name, month, year, model_name ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.model_name='%s';"
#define QUERY_SELECT_INSERT_UPDATE_NEW_CMIP5_DMART_MODEL_HOST_TIME "INSERT INTO esgf_dashboard.cmip5_dmart_model_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_replica_downloads,number_of_users, month, year, host_name, model_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, mdl.model_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_bridge_model AS bridgemdl ON fact.model_group_key = bridgemdl.model_group_key JOIN esgf_dashboard.cmip5_dim_model AS mdl ON bridgemdl.model_key=mdl.model_key WHERE size <> -1 and date.month=%d and date.year=%d and mdl.model_name='%s' GROUP BY host_name, date.month, date.year, mdl.model_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_CMIP5_MODEL_HOST_TIME "INSERT INTO esgf_dashboard.cmip5_dmart_model_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, host_name, model_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, mdl.model_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_bridge_model AS bridgemdl ON fact.model_group_key = bridgemdl.model_group_key JOIN esgf_dashboard.cmip5_dim_model AS mdl ON bridgemdl.model_key=mdl.model_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.cmip5_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, mdl.model_name ORDER BY date.year, date.month ASC;"
//NEW_CMIP5_DMART_EXPERIMENT_HOST_TIME
#define QUERY_SELECT_INSERT_NEW_CMIP5_DMART_EXPERIMENT_HOST_TIME "DELETE FROM esgf_dashboard.cmip5_dmart_experiment_host_time where host_name='%s'; INSERT INTO esgf_dashboard.cmip5_dmart_experiment_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, experiment_name, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, exp.experiment_name,fact.host_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_bridge_experiment AS bridgeexp ON fact.experiment_group_key = bridgeexp.experiment_group_key JOIN esgf_dashboard.cmip5_dim_experiment AS exp ON bridgeexp.experiment_key=exp.experiment_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, exp.experiment_name ORDER BY date.year, date.month ASC;"
#define QUERY_UPDATE_INSERT_NEW_CMIP5_DMART_EXPERIMENT_HOST_TIME "update esgf_dashboard.cmip5_dmart_experiment_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, number_of_replica_downloads=a.number_of_replica_downloads, month=a.month, year=a.year, host_name = a.host_name, experiment_name=a.experiment_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month as month, date.year as year, fact.host_name as host_name, exp.experiment_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_bridge_experiment AS bridgeexp ON fact.experiment_group_key = bridgeexp.experiment_group_key JOIN esgf_dashboard.cmip5_dim_experiment AS exp ON bridgeexp.experiment_key=exp.experiment_key WHERE size <> -1 and date.month=%d and date.year=%d and exp.experiment_name='%s' GROUP BY host_name, month, year, experiment_name ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.experiment_name='%s';"
#define QUERY_SELECT_INSERT_UPDATE_NEW_CMIP5_DMART_EXPERIMENT_HOST_TIME "INSERT INTO esgf_dashboard.cmip5_dmart_experiment_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_replica_downloads,number_of_users, month, year, host_name, experiment_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, exp.experiment_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_bridge_experiment AS bridgeexp ON fact.experiment_group_key = bridgeexp.experiment_group_key JOIN esgf_dashboard.cmip5_dim_experiment AS exp ON bridgeexp.experiment_key=exp.experiment_key WHERE size <> -1 and date.month=%d and date.year=%d and exp.experiment_name='%s' GROUP BY host_name, date.month, date.year, exp.experiment_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_CMIP5_EXPERIMENT_HOST_TIME "INSERT INTO esgf_dashboard.cmip5_dmart_experiment_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, host_name, experiment_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, exp.experiment_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_bridge_experiment AS bridgeexp ON fact.experiment_group_key = bridgeexp.experiment_group_key JOIN esgf_dashboard.cmip5_dim_experiment AS exp ON bridgeexp.experiment_key=exp.experiment_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.cmip5_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, exp.experiment_name ORDER BY date.year, date.month ASC;"
//NEW_CMIP5_DMART_DATASET_HOST_TIME
#define QUERY_SELECT_INSERT_NEW_CMIP5_DMART_DATASET_HOST_TIME "DELETE FROM esgf_dashboard.cmip5_dmart_dataset_host_time where host_name='%s'; INSERT INTO esgf_dashboard.cmip5_dmart_dataset_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, dataset_name,dataset_version,datetime_start, datetime_stop, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, dat.dataset_name, dat.dataset_version,dat.datetime_start,datetime_stop, fact.host_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_dim_dataset AS dat ON fact.dataset_key = dat.dataset_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop ORDER BY date.year, date.month ASC;"
#define QUERY_UPDATE_INSERT_NEW_CMIP5_DMART_DATASET_HOST_TIME "update esgf_dashboard.cmip5_dmart_dataset_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, number_of_replica_downloads=a.number_of_replica_downloads, month=a.month, year=a.year, dataset_name=a.dataset_name, dataset_version = a.dataset_version, datetime_start = a.datetime_start, datetime_stop = a.datetime_stop, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month as month, date.year as year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop, fact.host_name as host_name FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_dim_dataset AS dat ON fact.dataset_key = dat.dataset_key WHERE size <> -1 and date.month=%d and date.year=%d and dat.dataset_name='%s' and dat.dataset_version=%d and dat.datetime_start='%s' and dat.datetime_stop='%s' GROUP BY host_name, month, year, dataset_name, dataset_version, datetime_start, datetime_stop ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.dataset_name='%s' and b.dataset_version=%d and b.datetime_start='%s' and b.datetime_stop='%s';"
#define QUERY_SELECT_INSERT_UPDATE_NEW_CMIP5_DMART_DATASET_HOST_TIME "INSERT INTO esgf_dashboard.cmip5_dmart_dataset_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, host_name, dataset_name, dataset_version, datetime_start, datetime_stop) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_dim_dataset AS dat ON fact.dataset_key = dat.dataset_key WHERE size <> -1 and date.month=%d and date.year=%d and dat.dataset_name='%s' and dat.dataset_version=%d and dat.datetime_start='%s' and dat.datetime_stop='%s' GROUP BY host_name, date.month, date.year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_CMIP5_DATASET_HOST_TIME "INSERT INTO esgf_dashboard.cmip5_dmart_dataset_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users,number_of_replica_downloads, month, year, host_name, dataset_name, dataset_version, datetime_start, datetime_stop) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop FROM esgf_dashboard.cmip5_fact_download AS fact JOIN esgf_dashboard.cmip5_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip5_dim_dataset AS dat ON fact.dataset_key = dat.dataset_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.cmip5_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop ORDER BY date.year, date.month ASC;"
//UPDATE REGISTRY
#define QUERY_UPDATE_REGISTRY "UPDATE esgf_dashboard.registry set timestamp=%d, dmart_key=%d where datmart='%s';"
#define QUERY_GET_DMART_ID "SELECT dmart_key FROM %s ORDER BY dmart_key DESC LIMIT 1;"
#define QUERY_GET_DMART_POS "SELECT dmart_key, latitude, longitude, project_name FROM %s ORDER BY dmart_key DESC;"
#define QUERY_SELECT_INSERT_NEW_CROSS_DMART_PROJECT_HOST_UPDATE "INSERT INTO esgf_dashboard.cross_dmart_project_host_time(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, host_name, project_name, month, year) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, fact.host_name, project.project_name, date.month, date.year FROM esgf_dashboard.cross_fact_download AS fact JOIN esgf_dashboard.cross_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cross_bridge_project AS bridgeproj ON fact.project_group_key = bridgeproj.project_group_key JOIN esgf_dashboard.cross_dim_project AS project ON bridgeproj.project_key = project.project_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.cross_dim_date where month=%d and year=%d) GROUP BY host_name, project_name, month, year ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_NEW_CROSS_DMART_PROJECT_HOST_POS_UPDATE "INSERT INTO esgf_dashboard.cross_dmart_project_host_geolocation(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, host_name, project_name, latitude, longitude) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, fact.host_name, project.project_name, geo.latitude, geo.longitude FROM esgf_dashboard.cross_fact_download AS fact JOIN esgf_dashboard.cross_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key JOIN esgf_dashboard.cross_bridge_project AS bridgeproj ON fact.project_group_key = bridgeproj.project_group_key JOIN esgf_dashboard.cross_dim_project AS project ON bridgeproj.project_key = project.project_key WHERE size <> -1 and fact.date_key > %d GROUP BY host_name, project_name, geo.latitude, geo.longitude;"
#define QUERY_SELECT_CROSS_DMART_GEOLOCATION "SELECT SUM(size)||':'||COUNT(*)||':'||COUNT(CASE WHEN success THEN 1 END)||':'||COUNT(CASE WHEN replica THEN 1 END)||':'||ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END))||':'||COUNT(distinct user_id_hash)||':'||fact.host_name||':'||project.project_name||':'||geo.latitude||':'||geo.longitude as name FROM esgf_dashboard.cross_fact_download AS fact JOIN esgf_dashboard.cross_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key JOIN esgf_dashboard.cross_bridge_project AS bridgeproj ON fact.project_group_key = bridgeproj.project_group_key JOIN esgf_dashboard.cross_dim_project AS project ON bridgeproj.project_key = project.project_key WHERE size <> -1 GROUP BY host_name, project_name, geo.latitude, geo.longitude;"
//

//
//

//Queries about cmip6
#define QUERY_GET_LIST_OF_CMIP6_DIM_DATASET "SELECT dataset_name, dataset_key from esgf_dashboard.cmip6_dim_dataset;"
#define QUERY_GET_LIST_OF_CMIP6_DIM_INSTITUTE "SELECT institution_id_name, institution_id_key from esgf_dashboard.cmip6_dim_institution_id;"
#define QUERY_GET_LIST_OF_CMIP6_DIM_VARIABLE "SELECT cf_standard_name||':'||variable_long_name||':'||variable_code as name, variable_key from esgf_dashboard.cmip6_dim_variable;"
#define QUERY_GET_LIST_OF_CMIP6_DIM_FREQUENCY "SELECT frequency_value, frequency_key from esgf_dashboard.cmip6_dim_frequency;"
#define QUERY_GET_LIST_OF_CMIP6_DIM_REALM "SELECT realm_name, realm_key from esgf_dashboard.cmip6_dim_realm;"
#define QUERY_GET_LIST_OF_CMIP6_DIM_EXPERIMENT "SELECT experiment_id_name, experiment_id_key from esgf_dashboard.cmip6_dim_experiment_id;"
// Get list of CMIP6 BRIDGE INSTITUTE
#define QUERY_GET_LIST_OF_CMIP6_BRIDGE_INSTITUTE "SELECT institution_id_group_key, institution_id_key from esgf_dashboard.cmip6_bridge_institution_id;"
// Get list of CMIP6 BRIDGE INSTITUTE TMP
#define QUERY_GET_LIST_OF_CMIP6_BRIDGE_INSTITUTE_TMP "SELECT array_to_string(array(SELECT s.institution_id_key FROM esgf_dashboard.cmip6_bridge_institution_id s where s.institution_id_group_key=b.institution_id_group_key order by s.institution_id_key ASC), ',') AS institution_id_key,b.institution_id_group_key FROM esgf_dashboard.cmip6_bridge_institution_id b GROUP BY institution_id_group_key order BY b.institution_id_group_key ASC;"
#define QUERY_GET_LIST_OF_CMIP6_BRIDGE_VARIABLE_TMP "SELECT array_to_string(array(SELECT s.variable_key FROM esgf_dashboard.cmip6_bridge_variable s where s.variable_group_key=b.variable_group_key order by s.variable_key ASC), ',') AS variable_key,b.variable_group_key FROM esgf_dashboard.cmip6_bridge_variable b GROUP BY variable_group_key order BY b.variable_group_key ASC;"
// Get list of CMIP6 BRIDGE FREQUENCY
#define QUERY_GET_LIST_OF_CMIP6_BRIDGE_FREQUENCY "SELECT frequency_group_key, frequency_key from esgf_dashboard.cmip6_bridge_frequency;"
// Get list of CMIP6 BRIDGE FREQUENCY TMP
#define QUERY_GET_LIST_OF_CMIP6_BRIDGE_FREQUENCY_TMP "SELECT array_to_string(array(SELECT s.frequency_key FROM esgf_dashboard.cmip6_bridge_frequency s where s.frequency_group_key=b.frequency_group_key order by s.frequency_key ASC), ',') AS frequency_key,b.frequency_group_key FROM esgf_dashboard.cmip6_bridge_frequency b GROUP BY frequency_group_key order BY b.frequency_group_key ASC;"
//Get list of CMIP6 BRIDGE REALM
#define QUERY_GET_LIST_OF_CMIP6_BRIDGE_REALM "SELECT realm_group_key, realm_key from esgf_dashboard.cmip6_bridge_realm;"
//Get list of CMIP6 BRIDGE REALM TMP
#define QUERY_GET_LIST_OF_CMIP6_BRIDGE_REALM_TMP "SELECT array_to_string(array(SELECT s.realm_key FROM esgf_dashboard.cmip6_bridge_realm s where s.realm_group_key=b.realm_group_key order by s.realm_key ASC), ',') AS realm_key,b.realm_group_key FROM esgf_dashboard.cmip6_bridge_realm b GROUP BY realm_group_key order BY b.realm_group_key ASC;"
// Get list of CMIP6 DIM DATE
#define QUERY_GET_LIST_OF_CMIP6_DIM_DATE "SELECT download_date,date_key from esgf_dashboard.cmip6_dim_date;"
// Get list of CMIP6 DIM GEOLOCATION
#define QUERY_GET_LIST_OF_CMIP6_DIM_GEOLOCATION "SELECT (CAST(latitude as numeric(14,11)))||':'||(CAST(longitude as numeric(14,11))) AS name,geolocation_key from esgf_dashboard.cmip6_dim_geolocation;"
// Get list of CMIP6 BRIDGE EXPERIMENT
#define QUERY_GET_LIST_OF_CMIP6_BRIDGE_EXPERIMENT "SELECT experiment_group_key, experiment_key from esgf_dashboard.cmip6_bridge_experiment;"
// Get list of CMIP6 BRIDGE EXPERIMENT TMP
#define QUERY_GET_LIST_OF_CMIP6_BRIDGE_EXPERIMENT_TMP "SELECT array_to_string(array(SELECT s.experiment_id_key FROM esgf_dashboard.cmip6_bridge_experiment_id s where s.experiment_id_group_key=b.experiment_id_group_key order by s.experiment_id_key ASC), ',') AS experiment_id_key,b.experiment_id_group_key FROM esgf_dashboard.cmip6_bridge_experiment_id b GROUP BY experiment_id_group_key order BY b.experiment_id_group_key ASC;"
#define QUERY_GET_LIST_OF_CMIP6_DIM_SOURCE_ID "SELECT source_id_name, source_id_key from esgf_dashboard.cmip6_dim_source_id;"
// Get list of CMIP6 BRIDGE SOURCE ID
#define QUERY_GET_LIST_OF_CMIP6_BRIDGE_SOURCE_ID "SELECT source_id_group_key, source_id_key from esgf_dashboard.cmip6_bridge_source_id;"
//Get list of CMIP6 BRIDGE SOURCE ID TMP
#define QUERY_GET_LIST_OF_CMIP6_BRIDGE_SOURCE_ID_TMP "SELECT array_to_string(array(SELECT s.source_id_key FROM esgf_dashboard.cmip6_bridge_source_id s where s.source_id_group_key=b.source_id_group_key order by s.source_id_key ASC), ',') AS source_id_key,b.source_id_group_key FROM esgf_dashboard.cmip6_bridge_source_id b GROUP BY source_id_group_key order BY b.source_id_group_key ASC;"
// Get list of CMIP6 BRIDGE VARIABLE
#define QUERY_GET_LIST_OF_CMIP6_BRIDGE_VARIABLE "SELECT variable_group_key, variable_key from esgf_dashboard.cmip6_bridge_variable;"
// Get list of CMIP6 DOWNLOAD
#define QUERY_GET_LIST_OF_CMIP6_DOWNLOAD "SELECT (CAST(size as bigint)||':'||CAST(success as bool)||':'||CAST(duration as integer)||':'||CAST(replica as bool)||':'||host_name||':'||CAST(hour as integer)||':'||CAST(minute as integer)||':'||user_id_hash||':'||user_idp||':'||CAST(date_key as integer)||':'||CAST(geolocation_key as integer))||':'||CAST(dataset_key as integer)||':'||CAST(frequency_group_key as integer)||':'||CAST(variable_group_key as integer)||':'||CAST(experiment_id_group_key as integer)||':'||CAST(source_id_group_key as integer)||':'||CAST(realm_group_key as integer)||':'||CAST(institution_id_group_key as integer)||':'||CAST(id_query as integer) AS name, download_key from esgf_dashboard.cmip6_fact_download;"
//
#define QUERY_INSERT_NEW_CMIP6_DATE "INSERT into esgf_dashboard.cmip6_dim_date(download_date,month,year) values('%s','%s','%s');"
#define QUERY_GET_CMIP6_DATE_ID "SELECT date_key from esgf_dashboard.cmip6_dim_date where download_date='%s';"
#define QUERY_INSERT_CMIP6_DIM_GEOLOCATION "INSERT into esgf_dashboard.cmip6_dim_geolocation(latitude,longitude,country_id) values(%14.11f,%14.11f,%d);"
#define QUERY_GET_GEO_CMIP6_ID "SELECT geolocation_key from esgf_dashboard.cmip6_dim_geolocation where latitude=%14.11f and longitude=%14.11f;"
#define QUERY_INSERT_CMIP6_DIM_INSTITUTE "INSERT into esgf_dashboard.cmip6_dim_institution_id(institution_id_name) values('%s');"
#define QUERY_GET_INSTITUTE_CMIP6_ID "SELECT institution_id_key from esgf_dashboard.cmip6_dim_institution_id where institution_id_name='%s';"
#define QUERY_INST_GET_MAX_GROUP_CMIP6_ID "SELECT MAX(institution_id_group_key) AS max_bridge_inst from esgf_dashboard.cmip6_bridge_institution_id;"
#define QUERY_INSERT_CMIP6_BRIDGE_INSTITUTE "INSERT into esgf_dashboard.cmip6_bridge_institution_id(institution_id_key,institution_id_group_key) values(%d,%d);"
#define QUERY_INST_GET_MAX_GROUP_CMIP6_ID "SELECT MAX(institution_id_group_key) AS max_bridge_inst from esgf_dashboard.cmip6_bridge_institution_id;"
#define QUERY_INSERT_CMIP6_BRIDGE_INSTITUTE "INSERT into esgf_dashboard.cmip6_bridge_institution_id(institution_id_key,institution_id_group_key) values(%d,%d);"
#define QUERY_INSERT_CMIP6_DIM_VARIABLE "INSERT into esgf_dashboard.cmip6_dim_variable(cf_standard_name,variable_long_name,variable_code) values('%s','%s','%s');"
#define QUERY_GET_VARIABLE_CMIP6_ID "SELECT variable_key from esgf_dashboard.cmip6_dim_variable where cf_standard_name='%s' and variable_long_name='%s' and variable_code='%s';"
#define QUERY_VAR_GET_MAX_GROUP_CMIP6_ID "SELECT MAX(variable_group_key) AS max_bridge_var from esgf_dashboard.cmip6_bridge_variable;"
#define QUERY_INSERT_CMIP6_BRIDGE_VARIABLE "INSERT into esgf_dashboard.cmip6_bridge_variable(variable_key,variable_group_key) values(%d,%d);"
#define QUERY_VAR_GET_MAX_GROUP_CMIP6_ID "SELECT MAX(variable_group_key) AS max_bridge_var from esgf_dashboard.cmip6_bridge_variable;"
#define QUERY_INSERT_CMIP6_BRIDGE_VARIABLE "INSERT into esgf_dashboard.cmip6_bridge_variable(variable_key,variable_group_key) values(%d,%d);"
#define QUERY_INSERT_CMIP6_DIM_TIME_FREQUENCY "INSERT into esgf_dashboard.cmip6_dim_frequency(frequency_value) values('%s');"
#define QUERY_GET_TIME_FREQ_CMIP6_ID "SELECT frequency_key from esgf_dashboard.cmip6_dim_frequency where frequency_value='%s';"
#define QUERY_TIME_FREQ_GET_MAX_GROUP_CMIP6_ID "SELECT MAX(frequency_group_key) AS max_bridge_time_freq from esgf_dashboard.cmip6_bridge_frequency;"
#define QUERY_INSERT_CMIP6_BRIDGE_FREQUENCY "INSERT into esgf_dashboard.cmip6_bridge_frequency(frequency_key,frequency_group_key) values(%d,%d);"
#define QUERY_FREQ_GET_MAX_GROUP_CMIP6_ID "SELECT MAX(frequency_group_key) AS max_bridge_time_freq from esgf_dashboard.cmip6_bridge_frequency;"
#define QUERY_INSERT_CMIP6_BRIDGE_FREQUENCY "INSERT into esgf_dashboard.cmip6_bridge_frequency(frequency_key,frequency_group_key) values(%d,%d);"
#define QUERY_INSERT_CMIP6_DIM_SOURCE_ID "INSERT into esgf_dashboard.cmip6_dim_source_id(source_id_name) values('%s');"
#define QUERY_CMIP6_GET_SOURCE_ID_ID "SELECT source_id_key from esgf_dashboard.cmip6_dim_source_id where source_id_name='%s';"
#define QUERY_CMIP6_SOURCE_ID_GET_MAX_GROUP_ID "SELECT MAX(source_id_group_key) AS max_bridge_source_id from esgf_dashboard.cmip6_bridge_source_id;"
#define QUERY_INSERT_CMIP6_BRIDGE_SOURCE_ID "INSERT into esgf_dashboard.cmip6_bridge_source_id(source_id_key,source_id_group_key) values(%d,%d);"
#define QUERY_CMIP6_SOURCE_ID_GET_MAX_GROUP_ID "SELECT MAX(source_id_group_key) AS max_bridge_source_id from esgf_dashboard.cmip6_bridge_source_id;"
#define QUERY_INSERT_CMIP6_BRIDGE_SOURCE_ID "INSERT into esgf_dashboard.cmip6_bridge_source_id(source_id_key,source_id_group_key) values(%d,%d);"
#define QUERY_INSERT_CMIP6_DIM_REALM "INSERT into esgf_dashboard.cmip6_dim_realm(realm_name) values('%s');"
#define QUERY_GET_REALM_CMIP6_ID "SELECT realm_key from esgf_dashboard.cmip6_dim_realm where realm_name='%s';"
#define QUERY_REALM_GET_MAX_GROUP_CMIP6_ID "SELECT MAX(realm_group_key) AS max_bridge_realm from esgf_dashboard.cmip6_bridge_realm;"
#define QUERY_INSERT_CMIP6_BRIDGE_REALM "INSERT into esgf_dashboard.cmip6_bridge_realm(realm_key,realm_group_key) values(%d,%d);"
#define QUERY_REALM_GET_MAX_GROUP_CMIP6_ID "SELECT MAX(realm_group_key) AS max_bridge_realm from esgf_dashboard.cmip6_bridge_realm;"
#define QUERY_INSERT_CMIP6_BRIDGE_REALM "INSERT into esgf_dashboard.cmip6_bridge_realm(realm_key,realm_group_key) values(%d,%d);"
#define QUERY_INSERT_CMIP6_DIM_EXPERIMENT "INSERT into esgf_dashboard.cmip6_dim_experiment_id(experiment_id_name) values('%s');"
#define QUERY_GET_EXPERIMENT_CMIP6_ID "SELECT experiment_id_key from esgf_dashboard.cmip6_dim_experiment_id where experiment_id_name='%s';"
#define QUERY_EXPERIMENT_GET_MAX_GROUP_CMIP6_ID "SELECT MAX(experiment_id_group_key) AS max_bridge_experiment from esgf_dashboard.cmip6_bridge_experiment_id;"
#define QUERY_INSERT_CMIP6_BRIDGE_EXPERIMENT "INSERT into esgf_dashboard.cmip6_bridge_experiment_id(experiment_id_key,experiment_id_group_key) values(%d,%d);"
#define QUERY_EXPERIMENT_GET_MAX_GROUP_CMIP6_ID "SELECT MAX(experiment_id_group_key) AS max_bridge_experiment from esgf_dashboard.cmip6_bridge_experiment_id;"
#define QUERY_INSERT_CMIP6_BRIDGE_EXPERIMENT "INSERT into esgf_dashboard.cmip6_bridge_experiment_id(experiment_id_key,experiment_id_group_key) values(%d,%d);"
#define QUERY_INSERT_NEW_DATASET_CMIP6 "INSERT into esgf_dashboard.cmip6_dim_dataset(dataset_name,dataset_version,datetime_start,datetime_stop) values('%s',%d,'%s','%s');"
#define QUERY_GET_DATASET_CMIP6_ID "SELECT dataset_key from esgf_dashboard.cmip6_dim_dataset where dataset_name='%s';"
#define QUERY_INSERT_CMIP6_FACT_DOWNLOAD "INSERT into esgf_dashboard.cmip6_fact_download(size,success,duration,replica, host_name, hour, minute, user_id_hash, user_idp, date_key, geolocation_key, dataset_key, frequency_group_key, variable_group_key, experiment_id_group_key, source_id_group_key, realm_group_key, institution_id_group_key, id_query) values(%ld,'%s',%d,'%s','%s','%s','%s','%s','%s',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d);"
#define QUERY_GET_CMIP6_ROW "SELECT download_key from esgf_dashboard.cmip6_fact_download where size=%ld and success='%s' and duration=%d and replica='%s' and host_name='%s' and hour='%s' and minute='%s' and user_id_hash='%s' and user_idp='%s' and date_key=%d and geolocation_key=%d and dataset_key=%d and frequency_group_key=%d and variable_group_key=%d and experiment_id_group_key=%d and source_id_group_key=%d and realm_group_key=%d and institution_id_group_key=%d and id_query=%d;"
#define QUERY_SELECT_INSERT_NEW_CMIP6_DMART_CLIENTS_HOST_TIME_GEOLOCATION "DELETE FROM esgf_dashboard.cmip6_dmart_clients_host_geolocation where host_name='%s'; INSERT INTO esgf_dashboard.cmip6_dmart_clients_host_geolocation(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, latitude, longitude, country_id, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, geo.latitude, geo.longitude, geo.country_id, fact.host_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key WHERE size <> -1 GROUP BY host_name, geo.latitude, geo.longitude, geo.country_id;"
#define QUERY_SELECT_CMIP6_DMART_PROJECT_HOST_POS "select month, year from esgf_dashboard.cmip6_dmart_clients_host_time_geolocation where dmart_key=%d;"
#define QUERY_SELECT_CMIP6_DMART_POS_DATE "select distinct geo.latitude, geo.longitude from esgf_dashboard.cmip6_fact_download as fact, esgf_dashboard.cmip6_dim_geolocation as geo where fact.geolocation_key=geo.geolocation_key;"
#define QUERY_SELECT_CMIP6_DMART_EXIST_POS_DATE "select * from esgf_dashboard.cmip6_dmart_clients_host_geolocation where latitude=%s and longitude=%s;"
#define QUERY_UPDATE_INSERT_NEW_CMIP6_DMART_CLIENTS_HOST_TIME_GEOLOCATION "update esgf_dashboard.cmip6_dmart_clients_host_geolocation b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, number_of_replica_downloads=a.number_of_replica_downloads, latitude = a.latitude, longitude=a.longitude, country_id=a.country_id, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, geo.latitude as latitude, geo.longitude as longitude, geo.country_id as country_id, fact.host_name as host_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key WHERE size <> -1 and geo.latitude=%s and geo.longitude=%s GROUP BY host_name, latitude, longitude, country_id) AS a WHERE b.latitude=%s and b.longitude=%s;"
#define QUERY_SELECT_INSERT_UPDATE_NEW_CMIP6_DMART_CLIENTS_HOST_TIME_GEOLOCATION "INSERT INTO esgf_dashboard.cmip6_dmart_clients_host_geolocation(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads,latitude, longitude, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, geo.latitude, geo.longitude, fact.host_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_geolocation AS geo ON fact.geolocation_key = geo.geolocation_key WHERE size <> -1 and geo.latitude=%s and geo.longitude=%s GROUP BY host_name, geo.latitude, geo.longitude;"
#define QUERY_SELECT_INSERT_NEW_CMIP6_DMART_DATASET_HOST_TIME "DELETE FROM esgf_dashboard.cmip6_dmart_dataset_host_time where host_name='%s'; INSERT INTO esgf_dashboard.cmip6_dmart_dataset_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, dataset_name,dataset_version,datetime_start, datetime_stop, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, dat.dataset_name, dat.dataset_version,dat.datetime_start,datetime_stop, fact.host_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_dim_dataset AS dat ON fact.dataset_key = dat.dataset_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_CMIP6_DMART_DATASET_HOST_TIME "select month, year from esgf_dashboard.cmip6_dmart_dataset_host_time where dmart_key=%d;"
#define QUERY_SELECT_CMIP6_DMART_DAT_DATE "select distinct date.month, date.year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop from esgf_dashboard.cmip6_fact_download as fact, esgf_dashboard.cmip6_dim_date as date, esgf_dashboard.cmip6_dim_dataset as dat where fact.date_key=date.date_key and fact.dataset_key=dat.dataset_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_CMIP6_DMART_EXIST_DAT_DATE "select * from esgf_dashboard.cmip6_dmart_dataset_host_time where month=%d and year=%d and dataset_name='%s' and dataset_version=%d and datetime_start='%s' and datetime_stop='%s';"
#define QUERY_UPDATE_INSERT_NEW_CMIP6_DMART_DATASET_HOST_TIME "update esgf_dashboard.cmip6_dmart_dataset_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, number_of_replica_downloads=a.number_of_replica_downloads, month=a.month, year=a.year, dataset_name=a.dataset_name, dataset_version = a.dataset_version, datetime_start = a.datetime_start, datetime_stop = a.datetime_stop, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month as month, date.year as year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop, fact.host_name as host_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_dim_dataset AS dat ON fact.dataset_key = dat.dataset_key WHERE size <> -1 and date.month=%d and date.year=%d and dat.dataset_name='%s' and dat.dataset_version=%d and dat.datetime_start='%s' and dat.datetime_stop='%s' GROUP BY host_name, month, year, dataset_name, dataset_version, datetime_start, datetime_stop ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.dataset_name='%s' and b.dataset_version=%d and b.datetime_start='%s' and b.datetime_stop='%s';"
#define QUERY_SELECT_INSERT_UPDATE_CMIP6_DATASET_HOST_TIME "INSERT INTO esgf_dashboard.cmip6_dmart_dataset_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users,number_of_replica_downloads, month, year, host_name, dataset_name, dataset_version, datetime_start, datetime_stop) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_dim_dataset AS dat ON fact.dataset_key = dat.dataset_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.cmip6_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_NEW_CMIP6_DMART_DATASET_HOST_TIME "INSERT INTO esgf_dashboard.cmip6_dmart_dataset_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, host_name, dataset_name, dataset_version, datetime_start, datetime_stop) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_dim_dataset AS dat ON fact.dataset_key = dat.dataset_key WHERE size <> -1 and date.month=%d and date.year=%d and dat.dataset_name='%s' and dat.dataset_version=%d and dat.datetime_start='%s' and dat.datetime_stop='%s' GROUP BY host_name, date.month, date.year, dat.dataset_name, dat.dataset_version, dat.datetime_start, dat.datetime_stop ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_NEW_CMIP6_DMART_VARIABLE_HOST_TIME "DELETE FROM esgf_dashboard.cmip6_dmart_variable_host_time where host_name='%s'; INSERT INTO esgf_dashboard.cmip6_dmart_variable_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, variable_code, variable_long_name, cf_standard_name, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, var.variable_code, var.variable_long_name, var.cf_standard_name, fact.host_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_variable AS bridgevar ON fact.variable_group_key = bridgevar.variable_group_key JOIN esgf_dashboard.cmip6_dim_variable AS var ON bridgevar.variable_key=var.variable_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, var.variable_code, var.variable_long_name, var.cf_standard_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_CMIP6_DMART_VARIABLE_HOST_TIME "select month, year from esgf_dashboard.cmip6_dmart_variable_host_time where dmart_key=%d;"
#define QUERY_SELECT_CMIP6_DMART_VAR_DATE "select distinct date.month, date.year, var.variable_code, var.variable_long_name, var.cf_standard_name from esgf_dashboard.cmip6_fact_download as fact, esgf_dashboard.cmip6_dim_date as date, esgf_dashboard.cmip6_bridge_variable as bri, esgf_dashboard.cmip6_dim_variable as var where fact.date_key=date.date_key and fact.variable_group_key=bri.variable_group_key and bri.variable_key=var.variable_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_CMIP6_DMART_EXIST_VAR_DATE "select * from esgf_dashboard.cmip6_dmart_variable_host_time where month=%d and year=%d and variable_code='%s' and variable_long_name='%s' and cf_standard_name='%s';"
#define QUERY_UPDATE_INSERT_NEW_CMIP6_DMART_VARIABLE_HOST_TIME "update esgf_dashboard.cmip6_dmart_variable_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, number_of_replica_downloads=a.number_of_replica_downloads, month=a.month, year=a.year, variable_code = a.variable_code, variable_long_name=a.variable_long_name, cf_standard_name=a.cf_standard_name, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month as month, date.year as year, var.variable_code as variable_code, var.variable_long_name as variable_long_name, var.cf_standard_name as cf_standard_name, fact.host_name as host_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_variable AS bridgevar ON fact.variable_group_key = bridgevar.variable_group_key JOIN esgf_dashboard.cmip6_dim_variable AS var ON bridgevar.variable_key=var.variable_key WHERE size <> -1 and date.month=%d and date.year=%d and var.variable_code='%s' and var.variable_long_name='%s' and var.cf_standard_name='%s' GROUP BY host_name, month, year, variable_code, variable_long_name, cf_standard_name ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.variable_code='%s' and b.variable_long_name='%s' and b.cf_standard_name='%s';"
#define QUERY_SELECT_INSERT_UPDATE_NEW_CMIP6_DMART_VARIABLE_HOST_TIME "INSERT INTO esgf_dashboard.cmip6_dmart_variable_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_replica_downloads,number_of_users, month, year, host_name, variable_code, variable_long_name, cf_standard_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, var.variable_code, var.variable_long_name, var.cf_standard_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_variable AS bridgevar ON fact.variable_group_key = bridgevar.variable_group_key JOIN esgf_dashboard.cmip6_dim_variable AS var ON bridgevar.variable_key=var.variable_key WHERE size <> -1 and date.month=%d and date.year=%d and var.variable_code='%s' and var.variable_long_name='%s' and var.cf_standard_name='%s' GROUP BY host_name, date.month, date.year, var.variable_code, var.variable_long_name, var.cf_standard_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_CMIP6_VARIABLE_HOST_TIME "INSERT INTO esgf_dashboard.cmip6_dmart_variable_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, host_name, variable_code, variable_long_name, cf_standard_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, var.variable_code, var.variable_long_name, var.cf_standard_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_variable AS bridgevar ON fact.variable_group_key = bridgevar.variable_group_key JOIN esgf_dashboard.cmip6_dim_variable AS var ON bridgevar.variable_key=var.variable_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.cmip6_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, var.variable_code, var.variable_long_name, var.cf_standard_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_NEW_CMIP6_DMART_SOURCE_HOST_TIME "DELETE FROM esgf_dashboard.cmip6_dmart_source_id_host_time where host_name='%s'; INSERT INTO esgf_dashboard.cmip6_dmart_source_id_host_time(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, month, year, host_name, source_id_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, src.source_id_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_source_id AS bridgesrc ON fact.source_id_group_key = bridgesrc.source_id_group_key JOIN esgf_dashboard.cmip6_dim_source_id AS src ON bridgesrc.source_id_key=src.source_id_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, src.source_id_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_CMIP6_DMART_SOURCE_HOST_TIME "select month, year from esgf_dashboard.cmip6_dmart_source_id_host_time where dmart_key=%d;"
#define QUERY_SELECT_CMIP6_DMART_SRC_DATE "select distinct date.month, date.year, src.source_id_name from esgf_dashboard.cmip6_fact_download as fact, esgf_dashboard.cmip6_dim_date as date, esgf_dashboard.cmip6_bridge_source_id as bri, esgf_dashboard.cmip6_dim_source_id as src where fact.date_key=date.date_key and fact.source_id_group_key=bri.source_id_group_key and bri.source_id_key=src.source_id_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_CMIP6_DMART_EXIST_SRC_DATE "select * from esgf_dashboard.cmip6_dmart_source_id_host_time where month=%d and year=%d and source_id_name='%s';"
#define QUERY_UPDATE_INSERT_NEW_CMIP6_DMART_SOURCE_HOST_TIME "update esgf_dashboard.cmip6_dmart_source_id_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_replica_downloads=a.number_of_replica_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, month=a.month, year=a.year, source_id_name = a.source_id_name, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month as month, date.year as year, src.source_id_name as source_id_name, fact.host_name as host_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_source_id AS bridgesrc ON fact.source_id_group_key = bridgesrc.source_id_group_key JOIN esgf_dashboard.cmip6_dim_source_id AS src ON bridgesrc.source_id_key=src.source_id_key WHERE size <> -1 and date.month=%d and date.year=%d and src.source_id_name='%s' GROUP BY host_name, month, year, source_id_name ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.source_id_name='%s';"
#define QUERY_SELECT_INSERT_UPDATE_NEW_CMIP6_DMART_SOURCE_HOST_TIME "INSERT INTO esgf_dashboard.cmip6_dmart_source_id_host_time(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, month, year, host_name, source_id_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, src.source_id_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_source_id AS bridgesrc ON fact.source_id_group_key = bridgesrc.source_id_group_key JOIN esgf_dashboard.cmip6_dim_source_id AS src ON bridgesrc.source_id_key=src.source_id_key WHERE size <> -1 and date.month=%d and date.year=%d and src.source_id_name='%s' GROUP BY host_name, date.month, date.year, src.source_id_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_CMIP6_SOURCE_HOST_TIME "INSERT INTO esgf_dashboard.cmip6_dmart_source_id_host_time(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, month, year, host_name, source_id_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, src.source_id_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_source_id AS bridgesrc ON fact.source_id_group_key = bridgesrc.source_id_group_key JOIN esgf_dashboard.cmip6_dim_source_id AS src ON bridgesrc.source_id_key=src.source_id_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.cmip6_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, src.source_id_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_NEW_CMIP6_DMART_REALM_HOST_TIME "DELETE FROM esgf_dashboard.cmip6_dmart_realm_host_time where host_name='%s'; INSERT INTO esgf_dashboard.cmip6_dmart_realm_host_time(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, month, year, realm_name, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, rlm.realm_name, fact.host_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_realm AS bridgerlm ON fact.realm_group_key = bridgerlm.realm_group_key JOIN esgf_dashboard.cmip6_dim_realm AS rlm ON bridgerlm.realm_key=rlm.realm_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, rlm.realm_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_CMIP6_DMART_REALM_HOST_TIME "select month, year from esgf_dashboard.cmip6_dmart_realm_host_time where dmart_key=%d;"
#define QUERY_SELECT_CMIP6_DMART_RLM_DATE "select distinct date.month, date.year, rlm.realm_name from esgf_dashboard.cmip6_fact_download as fact, esgf_dashboard.cmip6_dim_date as date, esgf_dashboard.cmip6_bridge_realm as bri, esgf_dashboard.cmip6_dim_realm as rlm where fact.date_key=date.date_key and fact.realm_group_key=bri.realm_group_key and bri.realm_key=rlm.realm_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_CMIP6_DMART_EXIST_RLM_DATE "select * from esgf_dashboard.cmip6_dmart_realm_host_time where month=%d and year=%d and realm_name='%s';"
#define QUERY_UPDATE_INSERT_NEW_CMIP6_DMART_REALM_HOST_TIME "update esgf_dashboard.cmip6_dmart_realm_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, number_of_replica_downloads=a.number_of_replica_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, month=a.month, year=a.year, realm_name = a.realm_name, host_name = a.host_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month as month, date.year as year, rlm.realm_name as realm_name, fact.host_name as host_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_realm AS bridgerlm ON fact.realm_group_key = bridgerlm.realm_group_key JOIN esgf_dashboard.cmip6_dim_realm AS rlm ON bridgerlm.realm_key=rlm.realm_key WHERE size <> -1 and date.month=%d and date.year=%d and rlm.realm_name='%s' GROUP BY host_name, month, year, realm_name ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.realm_name='%s';"
#define QUERY_SELECT_INSERT_UPDATE_NEW_CMIP6_DMART_REALM_HOST_TIME "INSERT INTO esgf_dashboard.cmip6_dmart_realm_host_time(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, month, year, host_name, realm_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, rlm.realm_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_realm AS bridgerlm ON fact.source_id_group_key = bridgerlm.realm_group_key JOIN esgf_dashboard.cmip6_dim_realm AS rlm ON bridgerlm.realm_key=rlm.realm_key WHERE size <> -1 and date.month=%d and date.year=%d and rlm.realm_name='%s' GROUP BY host_name, date.month, date.year, rlm.realm_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_CMIP6_REALM_HOST_TIME "INSERT INTO esgf_dashboard.cmip6_dmart_realm_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, month, year, host_name, realm_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, fact.host_name, rlm.realm_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_realm AS bridgerlm ON fact.realm_group_key = bridgerlm.realm_group_key JOIN esgf_dashboard.cmip6_dim_realm AS rlm ON bridgerlm.realm_key=rlm.realm_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.cmip6_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, rlm.realm_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_NEW_CMIP6_DMART_EXPERIMENT_HOST_TIME "DELETE FROM esgf_dashboard.cmip6_dmart_experiment_id_host_time where host_name='%s'; INSERT INTO esgf_dashboard.cmip6_dmart_experiment_id_host_time(total_size, number_of_downloads, number_of_successful_downloads, number_of_replica_downloads, average_duration, number_of_users, month, year, experiment_id_name, host_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, date.month, date.year, exp.experiment_id_name,fact.host_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_experiment_id AS bridgeexp ON fact.experiment_id_group_key = bridgeexp.experiment_id_group_key JOIN esgf_dashboard.cmip6_dim_experiment_id AS exp ON bridgeexp.experiment_id_key=exp.experiment_id_key WHERE size <> -1 GROUP BY host_name, date.month, date.year, exp.experiment_id_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_CMIP6_DMART_EXPERIMENT_HOST_TIME "select month, year from esgf_dashboard.cmip6_dmart_experiment_id_host_time where dmart_key=%d;"
#define QUERY_SELECT_CMIP6_DMART_EXP_DATE "select distinct date.month, date.year, exp.experiment_id_name from esgf_dashboard.cmip6_fact_download as fact, esgf_dashboard.cmip6_dim_date as date, esgf_dashboard.cmip6_bridge_experiment_id as bri, esgf_dashboard.cmip6_dim_experiment_id as exp where fact.date_key=date.date_key and fact.experiment_id_group_key=bri.experiment_id_group_key and bri.experiment_id_key=exp.experiment_id_key and date.month=%d and date.year=%d;"
#define QUERY_SELECT_CMIP6_DMART_EXIST_EXP_DATE "select * from esgf_dashboard.cmip6_dmart_experiment_id_host_time where month=%d and year=%d and experiment_id_name='%s';"
#define QUERY_UPDATE_INSERT_NEW_CMIP6_DMART_EXPERIMENT_HOST_TIME "update esgf_dashboard.cmip6_dmart_experiment_id_host_time b set total_size = a.total_size, number_of_downloads = a.number_of_downloads, number_of_successful_downloads = a.number_of_successful_downloads, average_duration=a.average_duration, number_of_users=a.number_of_users, number_of_replica_downloads=a.number_of_replica_downloads, month=a.month, year=a.year, host_name = a.host_name, experiment_id_name=a.experiment_id_name FROM (SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month as month, date.year as year, fact.host_name as host_name, exp.experiment_id_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_experiment_id AS bridgeexp ON fact.experiment_id_group_key = bridgeexp.experiment_id_group_key JOIN esgf_dashboard.cmip6_dim_experiment_id AS exp ON bridgeexp.experiment_id_key=exp.experiment_id_key WHERE size <> -1 and date.month=%d and date.year=%d and exp.experiment_id_name='%s' GROUP BY host_name, month, year, experiment_id_name ORDER BY date.year, date.month ASC) AS a WHERE b.month=%d and b.year=%d and b.experiment_id_name='%s';"
#define QUERY_SELECT_INSERT_UPDATE_NEW_CMIP6_DMART_EXPERIMENT_HOST_TIME "INSERT INTO esgf_dashboard.cmip6_dmart_experiment_id_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_replica_downloads,number_of_users, month, year, host_name, experiment_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, exp.experiment_id_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_experiment_id AS bridgeexp ON fact.experiment_id_group_key = bridgeexp.experiment_id_group_key JOIN esgf_dashboard.cmip6_dim_experiment_id AS exp ON bridgeexp.experiment_id_key=exp.experiment_id_key WHERE size <> -1 and date.month=%d and date.year=%d and exp.experiment_id_name='%s' GROUP BY host_name, date.month, date.year, exp.experiment_id_name ORDER BY date.year, date.month ASC;"
#define QUERY_SELECT_INSERT_UPDATE_CMIP6_EXPERIMENT_HOST_TIME "INSERT INTO esgf_dashboard.cmip6_dmart_experiment_id_host_time(total_size, number_of_downloads, number_of_successful_downloads, average_duration, number_of_users, number_of_replica_downloads, month, year, host_name, experiment_name) SELECT SUM(size) AS total_size, COUNT(*) AS number_of_downloads, COUNT(CASE WHEN success THEN 1 END) AS number_of_successful_downloads, ROUND(AVG(CASE WHEN success THEN duration ELSE 0 END)) AS average_duration, COUNT(distinct user_id_hash) AS number_of_users, COUNT(CASE WHEN replica THEN 1 END) AS number_of_replica_downloads, date.month, date.year, fact.host_name, exp.experiment_id_name FROM esgf_dashboard.cmip6_fact_download AS fact JOIN esgf_dashboard.cmip6_dim_date AS date ON fact.date_key = date.date_key JOIN esgf_dashboard.cmip6_bridge_experiment_id AS bridgeexp ON fact.experiment_id_group_key = bridgeexp.experiment_id_group_key JOIN esgf_dashboard.cmip6_dim_experiment_id AS exp ON bridgeexp.experiment_id_key=exp.experiment_id_key WHERE size <> -1 and fact.date_key > (select max(date_key) from esgf_dashboard.cmip6_dim_date where month=%d and year=%d) GROUP BY host_name, month, year, exp.experiment_id_name ORDER BY date.year, date.month ASC;"



//-------------------------------------------

struct host * loadHosts(unsigned *numHosts);
int writeResults(struct host *hosts, const unsigned numHosts);
int realtime_cpu_get_stats(void);
int initialize_stats_file(char* filename);
#endif /* DBACCESS_H_ */
