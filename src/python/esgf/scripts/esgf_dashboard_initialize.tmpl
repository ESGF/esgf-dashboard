#!/usr/bin/env python

import sys
import os.path
import getopt

from pkg_resources import resource_filename
import sqlalchemy.exc
sqlalchemy.exceptions = sqlalchemy.exc
from migrate.versioning.shell import main as versioning_main
from migrate.versioning.api import version_control, db_version, upgrade, downgrade
try:
    from migrate.versioning.exceptions import DatabaseAlreadyControlledError
except:
    from migrate.exceptions import DatabaseAlreadyControlledError

# SQLAlchemy versions <0.6 have protocol "postgres", >=0.6 use "postgresql"
from sqlalchemy import __version__ as sqlalchemy_version
if sqlalchemy_version >= '0.6':
    dbschema = 'postgresql'
else:
    dbschema = 'postgres'

usage = """Usage:
    esgf_initialize [options]

    Create the ESGF node database: registration

Options:

    -c: Upgrade the ESGF database schema to the latest version.

    -d version: Downgrade the database schema to an older version. To remove all tables, use version=0.
        Use this option with caution, as node database information may be lost.

    --dburl url: Database URL of the form username:password@host:port/database
	For example: --dburl myname:mypass@sample.domain.gov:5432/esgcet

    -h: Help.

    -n: Preview the SQL commands, but don't change the version (upgrade / downgrade).

"""

def main(argv):

    try:
        args, lastargs = getopt.getopt(argv, "cd:hn", ['dburl='])
    except getopt.error:
        print sys.exc_value
        print usage
        sys.exit(0)

    dburl = None
    downgradeTables = False
    previewSql = False
    upgradeTables = False
    for flag, arg in args:
        if flag=='-c':
            upgradeTables = True
        elif flag=='-d':
            downgradeTables = True
            downgradeVersion = arg
        elif flag=='--dburl':
            dburl = dbschema+'://'+arg
        elif flag=='-h':
            print usage
            sys.exit(0)
        elif flag=='-n':
            previewSql = True

    if dburl is None:
        raise RuntimeError("No database URL specified.")

    # Setup schema migration if necessary ...
    repo_cfg_path = resource_filename('@module@.schema_migration', 'migrate.cfg')
    repo_path = os.path.dirname(repo_cfg_path)

    if upgradeTables:
        
        # If the ESGF schema is not under version control, setup versioning
        try:
            version_control(dburl, repo_path)
            print 'Enabled schema version control.'
        except DatabaseAlreadyControlledError:
            pass

        # Upgrade to the latest version
        # upgrade(dburl, repo_path, preview_sql=previewSql)
        versioning_main(['upgrade'], url=dburl, repository=repo_path, preview_sql=previewSql)

    elif downgradeTables:
        # downgrade(dburl, repo_path, downgradeVersion, preview_sql=previewSql)
        versioning_main(['downgrade'], url=dburl, repository=repo_path, version=downgradeVersion, preview_sql=previewSql)
    else:
        databaseVersion = db_version(dburl, repo_path)
        print databaseVersion

if __name__=='__main__':
    main(sys.argv[1:])
